// ---------------------------------------------------------------------
// This file is auto-generated by behaviac designer, so please don't modify it by yourself!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_AGENT_PROPERTIES_H_
#define _BEHAVIAC_AGENT_PROPERTIES_H_

#include "behaviac_agent_headers.h"
#include "behaviac_agent_member_visitor.h"
#include "behaviac_customized_types.h"

namespace behaviac
{
	// ---------------------------------------------------------------------
	// Delegate methods
	// ---------------------------------------------------------------------

	inline void FunctionPointer_behaviac_Agent_LogMessage(char* param0) { behaviac::Agent::LogMessage(param0); }
	inline void FunctionPointer_behaviac_Agent_VectorAdd(IList& param0, System::Object& param1) { behaviac::Agent::VectorAdd(param0, param1); }
	inline void FunctionPointer_behaviac_Agent_VectorClear(IList& param0) { behaviac::Agent::VectorClear(param0); }
	inline bool FunctionPointer_behaviac_Agent_VectorContains(IList& param0, System::Object& param1) { return behaviac::Agent::VectorContains(param0, param1); }
	inline int FunctionPointer_behaviac_Agent_VectorLength(IList& param0) { return behaviac::Agent::VectorLength(param0); }
	inline void FunctionPointer_behaviac_Agent_VectorRemove(IList& param0, System::Object& param1) { behaviac::Agent::VectorRemove(param0, param1); }
	inline void FunctionPointer_HTNAgentHouseBase_ObtainPermit(Agent* self) { ((HTNAgentHouseBase*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouseBase_ObtainPermit, void >(); }
	inline void FunctionPointer_HTNAgentHouseBase_LogMessage(char* param0) { HTNAgentHouseBase::LogMessage(param0); }
	inline void FunctionPointer_HTNAgentHouseBase_VectorAdd(IList& param0, System::Object& param1) { HTNAgentHouseBase::VectorAdd(param0, param1); }
	inline void FunctionPointer_HTNAgentHouseBase_VectorClear(IList& param0) { HTNAgentHouseBase::VectorClear(param0); }
	inline bool FunctionPointer_HTNAgentHouseBase_VectorContains(IList& param0, System::Object& param1) { return HTNAgentHouseBase::VectorContains(param0, param1); }
	inline int FunctionPointer_HTNAgentHouseBase_VectorLength(IList& param0) { return HTNAgentHouseBase::VectorLength(param0); }
	inline void FunctionPointer_HTNAgentHouseBase_VectorRemove(IList& param0, System::Object& param1) { HTNAgentHouseBase::VectorRemove(param0, param1); }

	inline void Set_ParTestAgentBase_STV_BOOL_0(bool value) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_BOOL_0, bool >() = value; }
	inline const void* Get_ParTestAgentBase_STV_BOOL_0() { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_BOOL_0, bool >(); }

	inline void Set_ParTestAgentBase_STV_CHAR_0(char value) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_CHAR_0, char >() = value; }
	inline const void* Get_ParTestAgentBase_STV_CHAR_0() { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_CHAR_0, char >(); }

	inline void Set_ParTestAgentBase_STV_ECOLOR_0(TNS::NE::NAT::eColor value) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_ECOLOR_0, TNS::NE::NAT::eColor >() = value; }
	inline const void* Get_ParTestAgentBase_STV_ECOLOR_0() { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_ECOLOR_0, TNS::NE::NAT::eColor >(); }

	inline void Set_ParTestAgentBase_STV_LIST_ECOLOR_0(TNS::NE::NAT::eColor value, int index) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index] = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_ECOLOR_0(int index) { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index]; }

	inline void Set_ParTestAgentBase_STV_LIST_BOOL_0(bool value, int index) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index] = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_BOOL_0(int index)
	{
#if _MSC_VER
		return ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index]._Getptr();
#else
		static ThreadBool buffer;
		bool b = ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index];
		buffer.set(b);
		return buffer.value();
#endif
	}

	inline void Set_ParTestAgentBase_STV_LIST_BOOL_0(behaviac::vector<bool> value) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >() = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_BOOL_0() { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >(); }

	inline void Set_ParTestAgentBase_STV_LIST_CHAR_0(char value, int index) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0, behaviac::vector<char> >()[index] = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_CHAR_0(int index) { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0, behaviac::vector<char> >()[index]; }

	inline void Set_ParTestAgentBase_STV_LIST_CHAR_0(behaviac::vector<char> value) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0, behaviac::vector<char> >() = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_CHAR_0() { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0, behaviac::vector<char> >(); }

	inline void Set_ParTestAgentBase_STV_LIST_ECOLOR_0(behaviac::vector<TNS::NE::NAT::eColor> value) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_ECOLOR_0() { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >(); }

	inline void Set_ParTestAgentBase_STV_LIST_SBYTE_0(signed char value, int index) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index] = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_SBYTE_0(int index) { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index]; }

	inline void Set_ParTestAgentBase_STV_LIST_SBYTE_0(behaviac::vector<signed char> value) { ((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0, behaviac::vector<signed char> >() = value; }
	inline const void* Get_ParTestAgentBase_STV_LIST_SBYTE_0() { return &((ParTestAgentBase*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0, behaviac::vector<signed char> >(); }

	inline void Set_ParTestAgentBase_TV_BOOL_0(Agent* self, bool value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0, bool >() = value; };
	inline const void* Get_ParTestAgentBase_TV_BOOL_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0, bool >(); };

	inline void Set_ParTestAgentBase_TV_BYTE_0(Agent* self, unsigned char value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >() = value; };
	inline const void* Get_ParTestAgentBase_TV_BYTE_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >(); };

	inline void Set_ParTestAgentBase_TV_CHAR_0(Agent* self, char value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >() = value; };
	inline const void* Get_ParTestAgentBase_TV_CHAR_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >(); };

	inline void Set_ParTestAgentBase_TV_ECOLOR_0(Agent* self, TNS::NE::NAT::eColor value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0, TNS::NE::NAT::eColor >() = value; };
	inline const void* Get_ParTestAgentBase_TV_ECOLOR_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0, TNS::NE::NAT::eColor >(); };

	inline void Set_ParTestAgentBase_TV_LIST_ECOLOR_0(Agent* self, TNS::NE::NAT::eColor value, int index) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index] = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_ECOLOR_0(Agent* self, int index) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index]; };

	inline void Set_ParTestAgentBase_TV_LIST_BOOL_0(Agent* self, bool value, int index) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index] = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_BOOL_0(Agent* self, int index)
	{
#if _MSC_VER
		return ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index]._Getptr();
#else
		static ThreadBool buffer;
		bool b = ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index];
		buffer.set(b);
		return buffer.value();
#endif
	}

	inline void Set_ParTestAgentBase_TV_LIST_BOOL_0(Agent* self, behaviac::vector<bool> value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >() = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_BOOL_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >(); };

	inline void Set_ParTestAgentBase_TV_LIST_CHAR_0(Agent* self, char value, int index) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >()[index] = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_CHAR_0(Agent* self, int index) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >()[index]; };

	inline void Set_ParTestAgentBase_TV_LIST_BYTE_0(Agent* self, unsigned char value, int index) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >()[index] = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_BYTE_0(Agent* self, int index) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >()[index]; };

	inline void Set_ParTestAgentBase_TV_LIST_BYTE_0(Agent* self, behaviac::vector<unsigned char> value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >() = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_BYTE_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >(); };

	inline void Set_ParTestAgentBase_TV_LIST_CHAR_0(Agent* self, behaviac::vector<char> value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >() = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_CHAR_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >(); };

	inline void Set_ParTestAgentBase_TV_LIST_ECOLOR_0(Agent* self, behaviac::vector<TNS::NE::NAT::eColor> value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_ECOLOR_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >(); };

	inline void Set_ParTestAgentBase_TV_LIST_SBYTE_0(Agent* self, signed char value, int index) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index] = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_SBYTE_0(Agent* self, int index) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index]; };

	inline void Set_ParTestAgentBase_TV_LIST_SBYTE_0(Agent* self, behaviac::vector<signed char> value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >() = value; };
	inline const void* Get_ParTestAgentBase_TV_LIST_SBYTE_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >(); };

	inline void Set_ParTestAgentBase_TV_SBYTE_0(Agent* self, signed char value) { ((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >() = value; };
	inline const void* Get_ParTestAgentBase_TV_SBYTE_0(Agent* self) { return &((ParTestAgentBase*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >(); };

	inline bool FunctionPointer_ParTestAgentBase_Func_BooleanIR(Agent* self, bool param0) { return (bool)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(param0); }
	inline behaviac::vector<bool> FunctionPointer_ParTestAgentBase_Func_BooleanListIR(Agent* self, behaviac::vector<bool> param0) { return (behaviac::vector<bool>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(param0); }
	inline unsigned char FunctionPointer_ParTestAgentBase_Func_ByteIR(Agent* self, unsigned char param0) { return (unsigned char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR, unsigned char, unsigned char >(param0); }
	inline behaviac::vector<unsigned char> FunctionPointer_ParTestAgentBase_Func_ByteListIR(Agent* self, behaviac::vector<unsigned char> param0) { return (behaviac::vector<unsigned char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListIR, behaviac::vector<unsigned char>, behaviac::vector<unsigned char> >(param0); }
	inline char FunctionPointer_ParTestAgentBase_Func_CharIR(Agent* self, char param0) { return (char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR, char, char >(param0); }
	inline behaviac::vector<char> FunctionPointer_ParTestAgentBase_Func_CharListIR(Agent* self, behaviac::vector<char> param0) { return (behaviac::vector<char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR, behaviac::vector<char>, behaviac::vector<char> >(param0); }
	inline TNS::NE::NAT::eColor FunctionPointer_ParTestAgentBase_Func_eColorIR(Agent* self, TNS::NE::NAT::eColor param0) { return (TNS::NE::NAT::eColor)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR, TNS::NE::NAT::eColor, TNS::NE::NAT::eColor >(param0); }
	inline behaviac::vector<TNS::NE::NAT::eColor> FunctionPointer_ParTestAgentBase_Func_eColorListIR(Agent* self, behaviac::vector<TNS::NE::NAT::eColor> param0) { return (behaviac::vector<TNS::NE::NAT::eColor>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR, behaviac::vector<TNS::NE::NAT::eColor>, behaviac::vector<TNS::NE::NAT::eColor> >(param0); }
	inline signed char FunctionPointer_ParTestAgentBase_Func_SByteIR(Agent* self, signed char param0) { return (signed char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteIR, signed char, signed char >(param0); }
	inline behaviac::vector<signed char> FunctionPointer_ParTestAgentBase_Func_SByteListIR(Agent* self, behaviac::vector<signed char> param0) { return (behaviac::vector<signed char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(param0); }
	inline unsigned char FunctionPointer_ParTestAgentBase_Func_ByteSMF(unsigned char param0) { return ParTestAgentBase::Func_ByteSMF(param0); }
	inline char FunctionPointer_ParTestAgentBase_Func_CharSMF(char param0) { return ParTestAgentBase::Func_CharSMF(param0); }
	inline behaviac::vector<char> FunctionPointer_ParTestAgentBase_Func_CharListSMF(behaviac::vector<char> param0) { return ParTestAgentBase::Func_CharListSMF(param0); }
	inline signed char FunctionPointer_ParTestAgentBase_Func_SByteSMF(signed char param0) { return ParTestAgentBase::Func_SByteSMF(param0); }
	inline behaviac::vector<signed char> FunctionPointer_ParTestAgentBase_Func_SByteListSMF(behaviac::vector<signed char> param0) { return ParTestAgentBase::Func_SByteListSMF(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_BooleanRef(Agent* self, bool& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanRef, void, bool& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_BooleanListRef(Agent* self, behaviac::vector<bool>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef, void, behaviac::vector<bool>& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_ByteRef(Agent* self, unsigned char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteRef, void, unsigned char& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_ByteListRef(Agent* self, behaviac::vector<unsigned char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListRef, void, behaviac::vector<unsigned char>& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_CharRef(Agent* self, char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharRef, void, char& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_CharListRef(Agent* self, behaviac::vector<char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListRef, void, behaviac::vector<char>& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_eColorRef(Agent* self, TNS::NE::NAT::eColor& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorRef, void, TNS::NE::NAT::eColor& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_eColorListRef(Agent* self, behaviac::vector<TNS::NE::NAT::eColor>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListRef, void, behaviac::vector<TNS::NE::NAT::eColor>& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_SByteRef(Agent* self, signed char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteRef, void, signed char& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_Func_SByteListRef(Agent* self, behaviac::vector<signed char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListRef, void, behaviac::vector<signed char>& >(param0); }
	inline void FunctionPointer_ParTestAgentBase_LogMessage(char* param0) { ParTestAgentBase::LogMessage(param0); }
	inline void FunctionPointer_ParTestAgentBase_VectorAdd(IList& param0, System::Object& param1) { ParTestAgentBase::VectorAdd(param0, param1); }
	inline void FunctionPointer_ParTestAgentBase_VectorClear(IList& param0) { ParTestAgentBase::VectorClear(param0); }
	inline bool FunctionPointer_ParTestAgentBase_VectorContains(IList& param0, System::Object& param1) { return ParTestAgentBase::VectorContains(param0, param1); }
	inline int FunctionPointer_ParTestAgentBase_VectorLength(IList& param0) { return ParTestAgentBase::VectorLength(param0); }
	inline void FunctionPointer_ParTestAgentBase_VectorRemove(IList& param0, System::Object& param1) { ParTestAgentBase::VectorRemove(param0, param1); }

	inline void Set_ParTestAgent_STV_INT_0(int value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_INT_0, int >() = value; }
	inline const void* Get_ParTestAgent_STV_INT_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_INT_0, int >(); }

	inline void Set_ParTestAgent_STV_KEMPLOYEE_0(TNS::ST::PER::WRK::kEmployee value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = value; }
	inline const void* Get_ParTestAgent_STV_KEMPLOYEE_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >(); }

	inline void Set_ParTestAgent_STV_LIST_INT_0(int value, int index) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >()[index] = value; }
	inline const void* Get_ParTestAgent_STV_LIST_INT_0(int index) { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >()[index]; }

	inline void Set_ParTestAgent_STV_LIST_INT_0(behaviac::vector<int> value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >() = value; }
	inline const void* Get_ParTestAgent_STV_LIST_INT_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >(); }

	inline void Set_ParTestAgent_STV_LIST_KEMPLOYEE_0(TNS::ST::PER::WRK::kEmployee value, int index) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index] = value; }
	inline const void* Get_ParTestAgent_STV_LIST_KEMPLOYEE_0(int index) { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index]; }

	inline void Set_ParTestAgent_STV_LIST_KEMPLOYEE_0(behaviac::vector<TNS::ST::PER::WRK::kEmployee> value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = value; }
	inline const void* Get_ParTestAgent_STV_LIST_KEMPLOYEE_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(); }

	inline void Set_ParTestAgent_TV_INT_0(Agent* self, int value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_INT_0, int >() = value; };
	inline const void* Get_ParTestAgent_TV_INT_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_INT_0, int >(); };

	inline void Set_ParTestAgent_TV_KEMPLOYEE_0(Agent* self, TNS::ST::PER::WRK::kEmployee value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = value; };
	inline const void* Get_ParTestAgent_TV_KEMPLOYEE_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >(); };

	inline void Set_ParTestAgent_TV_LIST_INT_0(Agent* self, int value, int index) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >()[index] = value; };
	inline const void* Get_ParTestAgent_TV_LIST_INT_0(Agent* self, int index) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >()[index]; };

	inline void Set_ParTestAgent_TV_LIST_INT_0(Agent* self, behaviac::vector<int> value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >() = value; };
	inline const void* Get_ParTestAgent_TV_LIST_INT_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >(); };

	inline void Set_ParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self, TNS::ST::PER::WRK::kEmployee value, int index) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index] = value; };
	inline const void* Get_ParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self, int index) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index]; };

	inline void Set_ParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee> value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = value; };
	inline const void* Get_ParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(); };

	inline void Set_ParTestAgent_TV_LONG_0(Agent* self, long value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LONG_0, long >() = value; };
	inline const void* Get_ParTestAgent_TV_LONG_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LONG_0, long >(); };

	inline void Set_ParTestAgent_TV_SHORT_0(Agent* self, short value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SHORT_0, short >() = value; };
	inline const void* Get_ParTestAgent_TV_SHORT_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SHORT_0, short >(); };

	inline void Set_ParTestAgent_TV_USHORT_0(Agent* self, unsigned short value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_USHORT_0, unsigned short >() = value; };
	inline const void* Get_ParTestAgent_TV_USHORT_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_USHORT_0, unsigned short >(); };

	inline void Set_ParTestAgent_STV_BOOL_0(bool value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_BOOL_0, bool >() = value; }
	inline const void* Get_ParTestAgent_STV_BOOL_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_BOOL_0, bool >(); }

	inline void Set_ParTestAgent_STV_CHAR_0(char value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_CHAR_0, char >() = value; }
	inline const void* Get_ParTestAgent_STV_CHAR_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_CHAR_0, char >(); }

	inline void Set_ParTestAgent_STV_ECOLOR_0(TNS::NE::NAT::eColor value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_ECOLOR_0, TNS::NE::NAT::eColor >() = value; }
	inline const void* Get_ParTestAgent_STV_ECOLOR_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_ECOLOR_0, TNS::NE::NAT::eColor >(); }

	inline void Set_ParTestAgent_STV_LIST_ECOLOR_0(TNS::NE::NAT::eColor value, int index) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index] = value; }
	inline const void* Get_ParTestAgent_STV_LIST_ECOLOR_0(int index) { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index]; }

	inline void Set_ParTestAgent_STV_LIST_BOOL_0(bool value, int index) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index] = value; }
	inline const void* Get_ParTestAgent_STV_LIST_BOOL_0(int index)
	{
#if _MSC_VER
		return ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index]._Getptr();
#else
		static ThreadBool buffer;
		bool b = ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index];
		buffer.set(b);
		return buffer.value();
#endif
	}

	inline void Set_ParTestAgent_STV_LIST_BOOL_0(behaviac::vector<bool> value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >() = value; }
	inline const void* Get_ParTestAgent_STV_LIST_BOOL_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >(); }

	inline void Set_ParTestAgent_STV_LIST_CHAR_0(char value, int index) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >()[index] = value; }
	inline const void* Get_ParTestAgent_STV_LIST_CHAR_0(int index) { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >()[index]; }

	inline void Set_ParTestAgent_STV_LIST_CHAR_0(behaviac::vector<char> value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >() = value; }
	inline const void* Get_ParTestAgent_STV_LIST_CHAR_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >(); }

	inline void Set_ParTestAgent_STV_LIST_ECOLOR_0(behaviac::vector<TNS::NE::NAT::eColor> value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = value; }
	inline const void* Get_ParTestAgent_STV_LIST_ECOLOR_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >(); }

	inline void Set_ParTestAgent_STV_LIST_SBYTE_0(signed char value, int index) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index] = value; }
	inline const void* Get_ParTestAgent_STV_LIST_SBYTE_0(int index) { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index]; }

	inline void Set_ParTestAgent_STV_LIST_SBYTE_0(behaviac::vector<signed char> value) { ((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >() = value; }
	inline const void* Get_ParTestAgent_STV_LIST_SBYTE_0() { return &((ParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >(); }

	inline void Set_ParTestAgent_TV_BOOL_0(Agent* self, bool value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_BOOL_0, bool >() = value; };
	inline const void* Get_ParTestAgent_TV_BOOL_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_BOOL_0, bool >(); };

	inline void Set_ParTestAgent_TV_BYTE_0(Agent* self, unsigned char value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_BYTE_0, unsigned char >() = value; };
	inline const void* Get_ParTestAgent_TV_BYTE_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_BYTE_0, unsigned char >(); };

	inline void Set_ParTestAgent_TV_CHAR_0(Agent* self, char value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_CHAR_0, char >() = value; };
	inline const void* Get_ParTestAgent_TV_CHAR_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_CHAR_0, char >(); };

	inline void Set_ParTestAgent_TV_ECOLOR_0(Agent* self, TNS::NE::NAT::eColor value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_ECOLOR_0, TNS::NE::NAT::eColor >() = value; };
	inline const void* Get_ParTestAgent_TV_ECOLOR_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_ECOLOR_0, TNS::NE::NAT::eColor >(); };

	inline void Set_ParTestAgent_TV_LIST_ECOLOR_0(Agent* self, TNS::NE::NAT::eColor value, int index) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index] = value; };
	inline const void* Get_ParTestAgent_TV_LIST_ECOLOR_0(Agent* self, int index) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index]; };

	inline void Set_ParTestAgent_TV_LIST_BOOL_0(Agent* self, bool value, int index) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index] = value; };
	inline const void* Get_ParTestAgent_TV_LIST_BOOL_0(Agent* self, int index)
	{
#if _MSC_VER
		return ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index]._Getptr();
#else
		static ThreadBool buffer;
		bool b = ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index];
		buffer.set(b);
		return buffer.value();
#endif
	}

	inline void Set_ParTestAgent_TV_LIST_BOOL_0(Agent* self, behaviac::vector<bool> value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >() = value; };
	inline const void* Get_ParTestAgent_TV_LIST_BOOL_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >(); };

	inline void Set_ParTestAgent_TV_LIST_CHAR_0(Agent* self, char value, int index) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >()[index] = value; };
	inline const void* Get_ParTestAgent_TV_LIST_CHAR_0(Agent* self, int index) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >()[index]; };

	inline void Set_ParTestAgent_TV_LIST_BYTE_0(Agent* self, unsigned char value, int index) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >()[index] = value; };
	inline const void* Get_ParTestAgent_TV_LIST_BYTE_0(Agent* self, int index) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >()[index]; };

	inline void Set_ParTestAgent_TV_LIST_BYTE_0(Agent* self, behaviac::vector<unsigned char> value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >() = value; };
	inline const void* Get_ParTestAgent_TV_LIST_BYTE_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >(); };

	inline void Set_ParTestAgent_TV_LIST_CHAR_0(Agent* self, behaviac::vector<char> value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >() = value; };
	inline const void* Get_ParTestAgent_TV_LIST_CHAR_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >(); };

	inline void Set_ParTestAgent_TV_LIST_ECOLOR_0(Agent* self, behaviac::vector<TNS::NE::NAT::eColor> value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = value; };
	inline const void* Get_ParTestAgent_TV_LIST_ECOLOR_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >(); };

	inline void Set_ParTestAgent_TV_LIST_SBYTE_0(Agent* self, signed char value, int index) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index] = value; };
	inline const void* Get_ParTestAgent_TV_LIST_SBYTE_0(Agent* self, int index) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index]; };

	inline void Set_ParTestAgent_TV_LIST_SBYTE_0(Agent* self, behaviac::vector<signed char> value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >() = value; };
	inline const void* Get_ParTestAgent_TV_LIST_SBYTE_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >(); };

	inline void Set_ParTestAgent_TV_SBYTE_0(Agent* self, signed char value) { ((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SBYTE_0, signed char >() = value; };
	inline const void* Get_ParTestAgent_TV_SBYTE_0(Agent* self) { return &((ParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SBYTE_0, signed char >(); };

	inline int FunctionPointer_ParTestAgent_Func_IntIR(Agent* self, int param0) { return (int)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntIR, int, int >(param0); }
	inline behaviac::vector<int> FunctionPointer_ParTestAgent_Func_IntListIR(Agent* self, behaviac::vector<int> param0) { return (behaviac::vector<int>)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListIR, behaviac::vector<int>, behaviac::vector<int> >(param0); }
	inline TNS::ST::PER::WRK::kEmployee FunctionPointer_ParTestAgent_Func_kEmployeeIR(Agent* self, TNS::ST::PER::WRK::kEmployee& param0) { return (TNS::ST::PER::WRK::kEmployee)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(param0); }
	inline behaviac::vector<TNS::ST::PER::WRK::kEmployee> FunctionPointer_ParTestAgent_Func_kEmployeeListIR(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee> param0) { return (behaviac::vector<TNS::ST::PER::WRK::kEmployee>)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(param0); }
	inline long FunctionPointer_ParTestAgent_Func_LongIR(Agent* self, long param0) { return (long)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongIR, long, long >(param0); }
	inline short FunctionPointer_ParTestAgent_Func_ShortIR(Agent* self, short param0) { return (short)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortIR, short, short >(param0); }
	inline unsigned short FunctionPointer_ParTestAgent_Func_UShortIR(Agent* self, unsigned short param0) { return (unsigned short)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortIR, unsigned short, unsigned short >(param0); }
	inline TNS::ST::PER::WRK::kEmployee FunctionPointer_ParTestAgent_Func_kEmployeeSMF(TNS::ST::PER::WRK::kEmployee& param0) { return ParTestAgent::Func_kEmployeeSMF(param0); }
	inline behaviac::vector<TNS::ST::PER::WRK::kEmployee> FunctionPointer_ParTestAgent_Func_kEmployeeListSMF(behaviac::vector<TNS::ST::PER::WRK::kEmployee> param0) { return ParTestAgent::Func_kEmployeeListSMF(param0); }
	inline void FunctionPointer_ParTestAgent_Func_IntRef(Agent* self, int& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntRef, void, int& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_IntListRef(Agent* self, behaviac::vector<int>& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListRef, void, behaviac::vector<int>& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_kEmployeeRef(Agent* self, TNS::ST::PER::WRK::kEmployee& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeRef, void, TNS::ST::PER::WRK::kEmployee& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_kEmployeeListRef(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee>& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListRef, void, behaviac::vector<TNS::ST::PER::WRK::kEmployee>& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_LongRef(Agent* self, long& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongRef, void, long& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_ShortRef(Agent* self, short& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortRef, void, short& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_UShortRef(Agent* self, unsigned short& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortRef, void, unsigned short& >(param0); }
	inline bool FunctionPointer_ParTestAgent_Func_BooleanIR(Agent* self, bool param0) { return (bool)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(param0); }
	inline behaviac::vector<bool> FunctionPointer_ParTestAgent_Func_BooleanListIR(Agent* self, behaviac::vector<bool> param0) { return (behaviac::vector<bool>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(param0); }
	inline unsigned char FunctionPointer_ParTestAgent_Func_ByteIR(Agent* self, unsigned char param0) { return (unsigned char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR, unsigned char, unsigned char >(param0); }
	inline behaviac::vector<unsigned char> FunctionPointer_ParTestAgent_Func_ByteListIR(Agent* self, behaviac::vector<unsigned char> param0) { return (behaviac::vector<unsigned char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListIR, behaviac::vector<unsigned char>, behaviac::vector<unsigned char> >(param0); }
	inline char FunctionPointer_ParTestAgent_Func_CharIR(Agent* self, char param0) { return (char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR, char, char >(param0); }
	inline behaviac::vector<char> FunctionPointer_ParTestAgent_Func_CharListIR(Agent* self, behaviac::vector<char> param0) { return (behaviac::vector<char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR, behaviac::vector<char>, behaviac::vector<char> >(param0); }
	inline TNS::NE::NAT::eColor FunctionPointer_ParTestAgent_Func_eColorIR(Agent* self, TNS::NE::NAT::eColor param0) { return (TNS::NE::NAT::eColor)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR, TNS::NE::NAT::eColor, TNS::NE::NAT::eColor >(param0); }
	inline behaviac::vector<TNS::NE::NAT::eColor> FunctionPointer_ParTestAgent_Func_eColorListIR(Agent* self, behaviac::vector<TNS::NE::NAT::eColor> param0) { return (behaviac::vector<TNS::NE::NAT::eColor>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR, behaviac::vector<TNS::NE::NAT::eColor>, behaviac::vector<TNS::NE::NAT::eColor> >(param0); }
	inline signed char FunctionPointer_ParTestAgent_Func_SByteIR(Agent* self, signed char param0) { return (signed char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteIR, signed char, signed char >(param0); }
	inline behaviac::vector<signed char> FunctionPointer_ParTestAgent_Func_SByteListIR(Agent* self, behaviac::vector<signed char> param0) { return (behaviac::vector<signed char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(param0); }
	inline unsigned char FunctionPointer_ParTestAgent_Func_ByteSMF(unsigned char param0) { return ParTestAgent::Func_ByteSMF(param0); }
	inline char FunctionPointer_ParTestAgent_Func_CharSMF(char param0) { return ParTestAgent::Func_CharSMF(param0); }
	inline behaviac::vector<char> FunctionPointer_ParTestAgent_Func_CharListSMF(behaviac::vector<char> param0) { return ParTestAgent::Func_CharListSMF(param0); }
	inline signed char FunctionPointer_ParTestAgent_Func_SByteSMF(signed char param0) { return ParTestAgent::Func_SByteSMF(param0); }
	inline behaviac::vector<signed char> FunctionPointer_ParTestAgent_Func_SByteListSMF(behaviac::vector<signed char> param0) { return ParTestAgent::Func_SByteListSMF(param0); }
	inline void FunctionPointer_ParTestAgent_Func_BooleanRef(Agent* self, bool& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanRef, void, bool& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_BooleanListRef(Agent* self, behaviac::vector<bool>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef, void, behaviac::vector<bool>& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_ByteRef(Agent* self, unsigned char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteRef, void, unsigned char& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_ByteListRef(Agent* self, behaviac::vector<unsigned char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListRef, void, behaviac::vector<unsigned char>& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_CharRef(Agent* self, char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharRef, void, char& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_CharListRef(Agent* self, behaviac::vector<char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListRef, void, behaviac::vector<char>& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_eColorRef(Agent* self, TNS::NE::NAT::eColor& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorRef, void, TNS::NE::NAT::eColor& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_eColorListRef(Agent* self, behaviac::vector<TNS::NE::NAT::eColor>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListRef, void, behaviac::vector<TNS::NE::NAT::eColor>& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_SByteRef(Agent* self, signed char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteRef, void, signed char& >(param0); }
	inline void FunctionPointer_ParTestAgent_Func_SByteListRef(Agent* self, behaviac::vector<signed char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListRef, void, behaviac::vector<signed char>& >(param0); }
	inline void FunctionPointer_ParTestAgent_LogMessage(char* param0) { ParTestAgent::LogMessage(param0); }
	inline void FunctionPointer_ParTestAgent_VectorAdd(IList& param0, System::Object& param1) { ParTestAgent::VectorAdd(param0, param1); }
	inline void FunctionPointer_ParTestAgent_VectorClear(IList& param0) { ParTestAgent::VectorClear(param0); }
	inline bool FunctionPointer_ParTestAgent_VectorContains(IList& param0, System::Object& param1) { return ParTestAgent::VectorContains(param0, param1); }
	inline int FunctionPointer_ParTestAgent_VectorLength(IList& param0) { return ParTestAgent::VectorLength(param0); }
	inline void FunctionPointer_ParTestAgent_VectorRemove(IList& param0, System::Object& param1) { ParTestAgent::VectorRemove(param0, param1); }

	inline void Set_AgentNodeTest_par_child(Agent* self, ChildNodeTest* value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_par_child, ChildNodeTest* >() = value; };
	inline const void* Get_AgentNodeTest_par_child(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_par_child, ChildNodeTest* >(); };

	inline void Set_AgentNodeTest_testColor(Agent* self, EnumTest value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testColor, EnumTest >() = value; };
	inline const void* Get_AgentNodeTest_testColor(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testColor, EnumTest >(); };

	inline void Set_AgentNodeTest_testVar_0(Agent* self, int value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = value; };
	inline const void* Get_AgentNodeTest_testVar_0(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >(); };

	inline void Set_AgentNodeTest_testVar_1(Agent* self, int value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = value; };
	inline const void* Get_AgentNodeTest_testVar_1(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >(); };

	inline void Set_AgentNodeTest_testVar_2(Agent* self, float value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >() = value; };
	inline const void* Get_AgentNodeTest_testVar_2(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >(); };

	inline void Set_AgentNodeTest_testVar_3(Agent* self, float value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_3, float >() = value; };
	inline const void* Get_AgentNodeTest_testVar_3(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_3, float >(); };

	inline void Set_AgentNodeTest_testVar_Act(Agent* self, Act value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_Act, Act >() = value; };
	inline const void* Get_AgentNodeTest_testVar_Act(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_Act, Act >(); };

	inline void Set_AgentNodeTest_testVar_str_0(Agent* self, behaviac::string value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_str_0, behaviac::string >() = value; };
	inline const void* Get_AgentNodeTest_testVar_str_0(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_str_0, behaviac::string >(); };

	inline void Set_AgentNodeTest_waiting_timeout_interval(Agent* self, int value) { ((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_waiting_timeout_interval, int >() = value; };
	inline const void* Get_AgentNodeTest_waiting_timeout_interval(Agent* self) { return &((AgentNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_waiting_timeout_interval, int >(); };

	inline bool FunctionPointer_AgentNodeTest_CanSeeEnemy(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_CanSeeEnemy, bool >(); }
	inline TestNS::Node* FunctionPointer_AgentNodeTest_createExtendedNode(Agent* self) { return (TestNS::Node*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createExtendedNode, TestNS::Node* >(); }
	inline UnityEngine::GameObject* FunctionPointer_AgentNodeTest_createGameObject(Agent* self) { return (UnityEngine::GameObject*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createGameObject, UnityEngine::GameObject* >(); }
	inline bool FunctionPointer_AgentNodeTest_enter_action_0(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_0, bool >(); }
	inline bool FunctionPointer_AgentNodeTest_enter_action_1(Agent* self, float param0) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(param0); }
	inline bool FunctionPointer_AgentNodeTest_enter_action_2(Agent* self, int param0, behaviac::string param1) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_2, bool, int, behaviac::string >(param0, param1); }
	inline void FunctionPointer_AgentNodeTest_exit_action_0(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_0, void >(); }
	inline void FunctionPointer_AgentNodeTest_exit_action_1(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_1, void, float >(param0); }
	inline void FunctionPointer_AgentNodeTest_exit_action_2(Agent* self, int param0, behaviac::string param1) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, behaviac::string >(param0, param1); }
	inline TestNS::Float2& FunctionPointer_AgentNodeTest_getConstExtendedStruct(Agent* self) { return (TestNS::Float2&)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstExtendedStruct, const TestNS::Float2& >(); }
	inline int FunctionPointer_AgentNodeTest_getConstOne(Agent* self) { return (int)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstOne, int >(); }
	inline int FunctionPointer_AgentNodeTest_getConstThousand(Agent* self, int param0, int param1) { return (int)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstThousand, int, int, int >(param0, param1); }
	inline TestNS::Float2& FunctionPointer_AgentNodeTest_getExtendedStruct(Agent* self) { return (TestNS::Float2&)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getExtendedStruct, TestNS::Float2& >(); }
	inline char* FunctionPointer_AgentNodeTest_GetRefTree(Agent* self) { return (char*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_GetRefTree, const char* >(); }
	inline void FunctionPointer_AgentNodeTest_initChildAgent(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgent, void >(); }
	inline void FunctionPointer_AgentNodeTest_initChildAgentTest(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgentTest, void >(); }
	inline bool FunctionPointer_AgentNodeTest_IsTargetValid(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_IsTargetValid, bool >(); }
	inline behaviac::EBTStatus FunctionPointer_AgentNodeTest_Move(Agent* self) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move, behaviac::EBTStatus >(); }
	inline behaviac::EBTStatus FunctionPointer_AgentNodeTest_MoveToTarget(Agent* self) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_MoveToTarget, behaviac::EBTStatus >(); }
	inline behaviac::EBTStatus FunctionPointer_AgentNodeTest_return_status(Agent* self, TestNS::Float2& param0) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_return_status, behaviac::EBTStatus, TestNS::Float2& >(param0); }
	inline void FunctionPointer_AgentNodeTest_SelectTarget(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >(); }
	inline void FunctionPointer_AgentNodeTest_setEventVarBool(Agent* self, bool param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarBool, void, bool >(param0); }
	inline void FunctionPointer_AgentNodeTest_setEventVarFloat(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarFloat, void, float >(param0); }
	inline void FunctionPointer_AgentNodeTest_setEventVarInt(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarInt, void, int >(param0); }
	inline void FunctionPointer_AgentNodeTest_setTestVar_0(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(param0); }
	inline void FunctionPointer_AgentNodeTest_setTestVar_0_2(Agent* self, int param0, float param1) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0_2, void, int, float >(param0, param1); }
	inline void FunctionPointer_AgentNodeTest_setTestVar_1(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(param0); }
	inline void FunctionPointer_AgentNodeTest_setTestVar_2(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(param0); }
	inline void FunctionPointer_AgentNodeTest_setTestVar_3(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3, void, float >(param0); }
	inline float FunctionPointer_AgentNodeTest_setTestVar_R(Agent* self) { return (float)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_R, float >(); }
	inline void FunctionPointer_AgentNodeTest_Stop(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Stop, void >(); }
	inline behaviac::EBTStatus FunctionPointer_AgentNodeTest_switchRef(Agent* self, behaviac::string& param0) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_switchRef, behaviac::EBTStatus, behaviac::string& >(param0); }
	inline void FunctionPointer_AgentNodeTest_testExtendedStruct(Agent* self, TestNS::Float2& param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testExtendedStruct, void, TestNS::Float2& >(param0); }
	inline TestClassA* FunctionPointer_AgentNodeTest_TestFunC(Agent* self) { return (TestClassA*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_TestFunC, TestClassA* >(); }
	inline void FunctionPointer_AgentNodeTest_testString(Agent* self, behaviac::string param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testString, void, behaviac::string >(param0); }
	inline void FunctionPointer_AgentNodeTest_testVectorStruct(Agent* self, behaviac::vector<TestNS::Float2>& param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testVectorStruct, void, behaviac::vector<TestNS::Float2>& >(param0); }
	inline void FunctionPointer_AgentNodeTest_transitPlanTactics(Agent* self, BSASN::TransitPlan& param0, EnumTest param1, behaviac::string& param2) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_transitPlanTactics, void, BSASN::TransitPlan, EnumTest, behaviac::string& >(param0, param1, param2); }
	inline void FunctionPointer_AgentNodeTest_LogMessage(char* param0) { AgentNodeTest::LogMessage(param0); }
	inline void FunctionPointer_AgentNodeTest_VectorAdd(IList& param0, System::Object& param1) { AgentNodeTest::VectorAdd(param0, param1); }
	inline void FunctionPointer_AgentNodeTest_VectorClear(IList& param0) { AgentNodeTest::VectorClear(param0); }
	inline bool FunctionPointer_AgentNodeTest_VectorContains(IList& param0, System::Object& param1) { return AgentNodeTest::VectorContains(param0, param1); }
	inline int FunctionPointer_AgentNodeTest_VectorLength(IList& param0) { return AgentNodeTest::VectorLength(param0); }
	inline void FunctionPointer_AgentNodeTest_VectorRemove(IList& param0, System::Object& param1) { AgentNodeTest::VectorRemove(param0, param1); }
	inline void FunctionPointer_AgentNodeTest_event_test_int(Agent* self, int val_int) { } /* event_test_int */
	inline void FunctionPointer_AgentNodeTest_event_test_int_bool(Agent* self, int val_int, bool val_bool) { } /* event_test_int_bool */
	inline void FunctionPointer_AgentNodeTest_event_test_int_bool_float(Agent* self, int val_int, bool val_bool, float val_float) { } /* event_test_int_bool_float */
	inline void FunctionPointer_AgentNodeTest_event_test_void(Agent* self) { } /* event_test_void */
	inline void FunctionPointer_AgentNodeTest_task_test(Agent* self, int count, float weight) { } /* task_test */
	inline void FunctionPointer_AgentNodeTest_event_test_agent(Agent* self, AgentNodeTest* agent) { } /* event_test_agent */
	inline void FunctionPointer_AgentNodeTest_event_test_float2(Agent* self, TestNS::Float2& float2) { } /* event_test_float2 */
	inline void FunctionPointer_AgentNodeTest_event_test_float2_ref(Agent* self, TestNS::Float2& float2) { } /* event_test_float2_ref */
	inline void FunctionPointer_AgentNodeTest_event_test_a(Agent* self, int param) { } /* event_test_a */
	inline void FunctionPointer_AgentNodeTest_event_test_b(Agent* self, int param) { } /* event_test_b */

	inline void Set_ChildNodeTest_par_child(Agent* self, ChildNodeTest* value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_par_child, ChildNodeTest* >() = value; };
	inline const void* Get_ChildNodeTest_par_child(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_par_child, ChildNodeTest* >(); };

	inline void Set_ChildNodeTest_testColor(Agent* self, EnumTest value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testColor, EnumTest >() = value; };
	inline const void* Get_ChildNodeTest_testColor(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testColor, EnumTest >(); };

	inline void Set_ChildNodeTest_testVar_0(Agent* self, int value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_0, int >() = value; };
	inline const void* Get_ChildNodeTest_testVar_0(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_0, int >(); };

	inline void Set_ChildNodeTest_testVar_1(Agent* self, int value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_1, int >() = value; };
	inline const void* Get_ChildNodeTest_testVar_1(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_1, int >(); };

	inline void Set_ChildNodeTest_testVar_2(Agent* self, float value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_2, float >() = value; };
	inline const void* Get_ChildNodeTest_testVar_2(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_2, float >(); };

	inline void Set_ChildNodeTest_testVar_3(Agent* self, float value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_3, float >() = value; };
	inline const void* Get_ChildNodeTest_testVar_3(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_3, float >(); };

	inline void Set_ChildNodeTest_testVar_Act(Agent* self, Act value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_Act, Act >() = value; };
	inline const void* Get_ChildNodeTest_testVar_Act(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_Act, Act >(); };

	inline void Set_ChildNodeTest_testVar_str_0(Agent* self, behaviac::string value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_str_0, behaviac::string >() = value; };
	inline const void* Get_ChildNodeTest_testVar_str_0(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_testVar_str_0, behaviac::string >(); };

	inline void Set_ChildNodeTest_waiting_timeout_interval(Agent* self, int value) { ((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_waiting_timeout_interval, int >() = value; };
	inline const void* Get_ChildNodeTest_waiting_timeout_interval(Agent* self) { return &((ChildNodeTest*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTest_waiting_timeout_interval, int >(); };

	inline void FunctionPointer_ChildNodeTest_event_test_int(Agent* self, int val_int) { } /* event_test_int */
	inline void FunctionPointer_ChildNodeTest_event_test_int_bool(Agent* self, int val_int, bool val_bool) { } /* event_test_int_bool */
	inline void FunctionPointer_ChildNodeTest_event_test_int_bool_float(Agent* self, int val_int, bool val_bool, float val_float) { } /* event_test_int_bool_float */
	inline void FunctionPointer_ChildNodeTest_event_test_void(Agent* self) { } /* event_test_void */
	inline void FunctionPointer_ChildNodeTest_task_test(Agent* self, int count, float weight) { } /* task_test */
	inline void FunctionPointer_ChildNodeTest_event_test_agent(Agent* self, AgentNodeTest* agent) { } /* event_test_agent */
	inline void FunctionPointer_ChildNodeTest_event_test_float2(Agent* self, TestNS::Float2& float2) { } /* event_test_float2 */
	inline void FunctionPointer_ChildNodeTest_event_test_float2_ref(Agent* self, TestNS::Float2& float2) { } /* event_test_float2_ref */
	inline void FunctionPointer_ChildNodeTest_event_test_a(Agent* self, int param) { } /* event_test_a */
	inline void FunctionPointer_ChildNodeTest_event_test_b(Agent* self, int param) { } /* event_test_b */
	inline double FunctionPointer_ChildNodeTest_GetConstDoubleValue(Agent* self) { return (double)((ChildNodeTest*)self)->_Execute_Method_<METHOD_TYPE_ChildNodeTest_GetConstDoubleValue, double >(); }
	inline float FunctionPointer_ChildNodeTest_GetConstFloatValue(Agent* self) { return (float)((ChildNodeTest*)self)->_Execute_Method_<METHOD_TYPE_ChildNodeTest_GetConstFloatValue, float >(); }
	inline bool FunctionPointer_ChildNodeTest_CanSeeEnemy(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_CanSeeEnemy, bool >(); }
	inline TestNS::Node* FunctionPointer_ChildNodeTest_createExtendedNode(Agent* self) { return (TestNS::Node*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createExtendedNode, TestNS::Node* >(); }
	inline UnityEngine::GameObject* FunctionPointer_ChildNodeTest_createGameObject(Agent* self) { return (UnityEngine::GameObject*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createGameObject, UnityEngine::GameObject* >(); }
	inline bool FunctionPointer_ChildNodeTest_enter_action_0(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_0, bool >(); }
	inline bool FunctionPointer_ChildNodeTest_enter_action_1(Agent* self, float param0) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(param0); }
	inline bool FunctionPointer_ChildNodeTest_enter_action_2(Agent* self, int param0, behaviac::string param1) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_2, bool, int, behaviac::string >(param0, param1); }
	inline void FunctionPointer_ChildNodeTest_exit_action_0(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_0, void >(); }
	inline void FunctionPointer_ChildNodeTest_exit_action_1(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_1, void, float >(param0); }
	inline void FunctionPointer_ChildNodeTest_exit_action_2(Agent* self, int param0, behaviac::string param1) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, behaviac::string >(param0, param1); }
	inline TestNS::Float2& FunctionPointer_ChildNodeTest_getConstExtendedStruct(Agent* self) { return (TestNS::Float2&)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstExtendedStruct, const TestNS::Float2& >(); }
	inline int FunctionPointer_ChildNodeTest_getConstOne(Agent* self) { return (int)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstOne, int >(); }
	inline int FunctionPointer_ChildNodeTest_getConstThousand(Agent* self, int param0, int param1) { return (int)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstThousand, int, int, int >(param0, param1); }
	inline TestNS::Float2& FunctionPointer_ChildNodeTest_getExtendedStruct(Agent* self) { return (TestNS::Float2&)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getExtendedStruct, TestNS::Float2& >(); }
	inline char* FunctionPointer_ChildNodeTest_GetRefTree(Agent* self) { return (char*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_GetRefTree, const char* >(); }
	inline void FunctionPointer_ChildNodeTest_initChildAgent(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgent, void >(); }
	inline void FunctionPointer_ChildNodeTest_initChildAgentTest(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgentTest, void >(); }
	inline bool FunctionPointer_ChildNodeTest_IsTargetValid(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_IsTargetValid, bool >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTest_Move(Agent* self) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move, behaviac::EBTStatus >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTest_MoveToTarget(Agent* self) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_MoveToTarget, behaviac::EBTStatus >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTest_return_status(Agent* self, TestNS::Float2& param0) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_return_status, behaviac::EBTStatus, TestNS::Float2& >(param0); }
	inline void FunctionPointer_ChildNodeTest_SelectTarget(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >(); }
	inline void FunctionPointer_ChildNodeTest_setEventVarBool(Agent* self, bool param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarBool, void, bool >(param0); }
	inline void FunctionPointer_ChildNodeTest_setEventVarFloat(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarFloat, void, float >(param0); }
	inline void FunctionPointer_ChildNodeTest_setEventVarInt(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarInt, void, int >(param0); }
	inline void FunctionPointer_ChildNodeTest_setTestVar_0(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(param0); }
	inline void FunctionPointer_ChildNodeTest_setTestVar_0_2(Agent* self, int param0, float param1) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0_2, void, int, float >(param0, param1); }
	inline void FunctionPointer_ChildNodeTest_setTestVar_1(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(param0); }
	inline void FunctionPointer_ChildNodeTest_setTestVar_2(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(param0); }
	inline void FunctionPointer_ChildNodeTest_setTestVar_3(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3, void, float >(param0); }
	inline float FunctionPointer_ChildNodeTest_setTestVar_R(Agent* self) { return (float)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_R, float >(); }
	inline void FunctionPointer_ChildNodeTest_Stop(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Stop, void >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTest_switchRef(Agent* self, behaviac::string& param0) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_switchRef, behaviac::EBTStatus, behaviac::string& >(param0); }
	inline void FunctionPointer_ChildNodeTest_testExtendedStruct(Agent* self, TestNS::Float2& param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testExtendedStruct, void, TestNS::Float2& >(param0); }
	inline TestClassA* FunctionPointer_ChildNodeTest_TestFunC(Agent* self) { return (TestClassA*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_TestFunC, TestClassA* >(); }
	inline void FunctionPointer_ChildNodeTest_testString(Agent* self, behaviac::string param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testString, void, behaviac::string >(param0); }
	inline void FunctionPointer_ChildNodeTest_testVectorStruct(Agent* self, behaviac::vector<TestNS::Float2>& param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testVectorStruct, void, behaviac::vector<TestNS::Float2>& >(param0); }
	inline void FunctionPointer_ChildNodeTest_transitPlanTactics(Agent* self, BSASN::TransitPlan& param0, EnumTest param1, behaviac::string& param2) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_transitPlanTactics, void, BSASN::TransitPlan, EnumTest, behaviac::string& >(param0, param1, param2); }
	inline void FunctionPointer_ChildNodeTest_LogMessage(char* param0) { ChildNodeTest::LogMessage(param0); }
	inline void FunctionPointer_ChildNodeTest_VectorAdd(IList& param0, System::Object& param1) { ChildNodeTest::VectorAdd(param0, param1); }
	inline void FunctionPointer_ChildNodeTest_VectorClear(IList& param0) { ChildNodeTest::VectorClear(param0); }
	inline bool FunctionPointer_ChildNodeTest_VectorContains(IList& param0, System::Object& param1) { return ChildNodeTest::VectorContains(param0, param1); }
	inline int FunctionPointer_ChildNodeTest_VectorLength(IList& param0) { return ChildNodeTest::VectorLength(param0); }
	inline void FunctionPointer_ChildNodeTest_VectorRemove(IList& param0, System::Object& param1) { ChildNodeTest::VectorRemove(param0, param1); }

	inline void Set_ChildNodeTestSub_IntValue(Agent* self, int value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_IntValue, int >() = value; };
	inline const void* Get_ChildNodeTestSub_IntValue(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_IntValue, int >(); };

	inline void Set_ChildNodeTestSub_par_child(Agent* self, ChildNodeTest* value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_par_child, ChildNodeTest* >() = value; };
	inline const void* Get_ChildNodeTestSub_par_child(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_par_child, ChildNodeTest* >(); };

	inline void Set_ChildNodeTestSub_testColor(Agent* self, EnumTest value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testColor, EnumTest >() = value; };
	inline const void* Get_ChildNodeTestSub_testColor(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testColor, EnumTest >(); };

	inline void Set_ChildNodeTestSub_testVar_0(Agent* self, int value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_0, int >() = value; };
	inline const void* Get_ChildNodeTestSub_testVar_0(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_0, int >(); };

	inline void Set_ChildNodeTestSub_testVar_1(Agent* self, int value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_1, int >() = value; };
	inline const void* Get_ChildNodeTestSub_testVar_1(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_1, int >(); };

	inline void Set_ChildNodeTestSub_testVar_2(Agent* self, float value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_2, float >() = value; };
	inline const void* Get_ChildNodeTestSub_testVar_2(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_2, float >(); };

	inline void Set_ChildNodeTestSub_testVar_3(Agent* self, float value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_3, float >() = value; };
	inline const void* Get_ChildNodeTestSub_testVar_3(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_3, float >(); };

	inline void Set_ChildNodeTestSub_testVar_Act(Agent* self, Act value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_Act, Act >() = value; };
	inline const void* Get_ChildNodeTestSub_testVar_Act(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_Act, Act >(); };

	inline void Set_ChildNodeTestSub_testVar_str_0(Agent* self, behaviac::string value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_str_0, behaviac::string >() = value; };
	inline const void* Get_ChildNodeTestSub_testVar_str_0(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_testVar_str_0, behaviac::string >(); };

	inline void Set_ChildNodeTestSub_waiting_timeout_interval(Agent* self, int value) { ((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_waiting_timeout_interval, int >() = value; };
	inline const void* Get_ChildNodeTestSub_waiting_timeout_interval(Agent* self) { return &((ChildNodeTestSub*)self)->_Get_Property_<PROPERTY_TYPE_ChildNodeTestSub_waiting_timeout_interval, int >(); };

	inline void FunctionPointer_ChildNodeTestSub_event_test_int(Agent* self, int val_int) { } /* event_test_int */
	inline void FunctionPointer_ChildNodeTestSub_event_test_int_bool(Agent* self, int val_int, bool val_bool) { } /* event_test_int_bool */
	inline void FunctionPointer_ChildNodeTestSub_event_test_int_bool_float(Agent* self, int val_int, bool val_bool, float val_float) { } /* event_test_int_bool_float */
	inline void FunctionPointer_ChildNodeTestSub_event_test_void(Agent* self) { } /* event_test_void */
	inline void FunctionPointer_ChildNodeTestSub_task_test(Agent* self, int count, float weight) { } /* task_test */
	inline void FunctionPointer_ChildNodeTestSub_event_test_agent(Agent* self, AgentNodeTest* agent) { } /* event_test_agent */
	inline void FunctionPointer_ChildNodeTestSub_event_test_float2(Agent* self, TestNS::Float2& float2) { } /* event_test_float2 */
	inline void FunctionPointer_ChildNodeTestSub_event_test_float2_ref(Agent* self, TestNS::Float2& float2) { } /* event_test_float2_ref */
	inline void FunctionPointer_ChildNodeTestSub_event_test_a(Agent* self, int param) { } /* event_test_a */
	inline void FunctionPointer_ChildNodeTestSub_event_test_b(Agent* self, int param) { } /* event_test_b */
	inline float FunctionPointer_ChildNodeTestSub_GetConstFloatValueSub(Agent* self) { return (float)((ChildNodeTestSub*)self)->_Execute_Method_<METHOD_TYPE_ChildNodeTestSub_GetConstFloatValueSub, float >(); }
	inline double FunctionPointer_ChildNodeTestSub_GetConstDoubleValue(Agent* self) { return (double)((ChildNodeTest*)self)->_Execute_Method_<METHOD_TYPE_ChildNodeTest_GetConstDoubleValue, double >(); }
	inline float FunctionPointer_ChildNodeTestSub_GetConstFloatValue(Agent* self) { return (float)((ChildNodeTest*)self)->_Execute_Method_<METHOD_TYPE_ChildNodeTest_GetConstFloatValue, float >(); }
	inline bool FunctionPointer_ChildNodeTestSub_CanSeeEnemy(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_CanSeeEnemy, bool >(); }
	inline TestNS::Node* FunctionPointer_ChildNodeTestSub_createExtendedNode(Agent* self) { return (TestNS::Node*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createExtendedNode, TestNS::Node* >(); }
	inline UnityEngine::GameObject* FunctionPointer_ChildNodeTestSub_createGameObject(Agent* self) { return (UnityEngine::GameObject*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createGameObject, UnityEngine::GameObject* >(); }
	inline bool FunctionPointer_ChildNodeTestSub_enter_action_0(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_0, bool >(); }
	inline bool FunctionPointer_ChildNodeTestSub_enter_action_1(Agent* self, float param0) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(param0); }
	inline bool FunctionPointer_ChildNodeTestSub_enter_action_2(Agent* self, int param0, behaviac::string param1) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_2, bool, int, behaviac::string >(param0, param1); }
	inline void FunctionPointer_ChildNodeTestSub_exit_action_0(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_0, void >(); }
	inline void FunctionPointer_ChildNodeTestSub_exit_action_1(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_1, void, float >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_exit_action_2(Agent* self, int param0, behaviac::string param1) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, behaviac::string >(param0, param1); }
	inline TestNS::Float2& FunctionPointer_ChildNodeTestSub_getConstExtendedStruct(Agent* self) { return (TestNS::Float2&)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstExtendedStruct, const TestNS::Float2& >(); }
	inline int FunctionPointer_ChildNodeTestSub_getConstOne(Agent* self) { return (int)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstOne, int >(); }
	inline int FunctionPointer_ChildNodeTestSub_getConstThousand(Agent* self, int param0, int param1) { return (int)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstThousand, int, int, int >(param0, param1); }
	inline TestNS::Float2& FunctionPointer_ChildNodeTestSub_getExtendedStruct(Agent* self) { return (TestNS::Float2&)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getExtendedStruct, TestNS::Float2& >(); }
	inline char* FunctionPointer_ChildNodeTestSub_GetRefTree(Agent* self) { return (char*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_GetRefTree, const char* >(); }
	inline void FunctionPointer_ChildNodeTestSub_initChildAgent(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgent, void >(); }
	inline void FunctionPointer_ChildNodeTestSub_initChildAgentTest(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgentTest, void >(); }
	inline bool FunctionPointer_ChildNodeTestSub_IsTargetValid(Agent* self) { return (bool)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_IsTargetValid, bool >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTestSub_Move(Agent* self) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move, behaviac::EBTStatus >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTestSub_MoveToTarget(Agent* self) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_MoveToTarget, behaviac::EBTStatus >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTestSub_return_status(Agent* self, TestNS::Float2& param0) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_return_status, behaviac::EBTStatus, TestNS::Float2& >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_SelectTarget(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >(); }
	inline void FunctionPointer_ChildNodeTestSub_setEventVarBool(Agent* self, bool param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarBool, void, bool >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_setEventVarFloat(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarFloat, void, float >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_setEventVarInt(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarInt, void, int >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_setTestVar_0(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_setTestVar_0_2(Agent* self, int param0, float param1) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0_2, void, int, float >(param0, param1); }
	inline void FunctionPointer_ChildNodeTestSub_setTestVar_1(Agent* self, int param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_setTestVar_2(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_setTestVar_3(Agent* self, float param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3, void, float >(param0); }
	inline float FunctionPointer_ChildNodeTestSub_setTestVar_R(Agent* self) { return (float)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_R, float >(); }
	inline void FunctionPointer_ChildNodeTestSub_Stop(Agent* self) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Stop, void >(); }
	inline behaviac::EBTStatus FunctionPointer_ChildNodeTestSub_switchRef(Agent* self, behaviac::string& param0) { return (behaviac::EBTStatus)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_switchRef, behaviac::EBTStatus, behaviac::string& >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_testExtendedStruct(Agent* self, TestNS::Float2& param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testExtendedStruct, void, TestNS::Float2& >(param0); }
	inline TestClassA* FunctionPointer_ChildNodeTestSub_TestFunC(Agent* self) { return (TestClassA*)((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_TestFunC, TestClassA* >(); }
	inline void FunctionPointer_ChildNodeTestSub_testString(Agent* self, behaviac::string param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testString, void, behaviac::string >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_testVectorStruct(Agent* self, behaviac::vector<TestNS::Float2>& param0) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testVectorStruct, void, behaviac::vector<TestNS::Float2>& >(param0); }
	inline void FunctionPointer_ChildNodeTestSub_transitPlanTactics(Agent* self, BSASN::TransitPlan& param0, EnumTest param1, behaviac::string& param2) { ((AgentNodeTest*)self)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_transitPlanTactics, void, BSASN::TransitPlan, EnumTest, behaviac::string& >(param0, param1, param2); }
	inline void FunctionPointer_ChildNodeTestSub_LogMessage(char* param0) { ChildNodeTestSub::LogMessage(param0); }
	inline void FunctionPointer_ChildNodeTestSub_VectorAdd(IList& param0, System::Object& param1) { ChildNodeTestSub::VectorAdd(param0, param1); }
	inline void FunctionPointer_ChildNodeTestSub_VectorClear(IList& param0) { ChildNodeTestSub::VectorClear(param0); }
	inline bool FunctionPointer_ChildNodeTestSub_VectorContains(IList& param0, System::Object& param1) { return ChildNodeTestSub::VectorContains(param0, param1); }
	inline int FunctionPointer_ChildNodeTestSub_VectorLength(IList& param0) { return ChildNodeTestSub::VectorLength(param0); }
	inline void FunctionPointer_ChildNodeTestSub_VectorRemove(IList& param0, System::Object& param1) { ChildNodeTestSub::VectorRemove(param0, param1); }

	inline void Set_CustomPropertyAgent_BoolMemberReadonly(Agent* self, bool value) { ((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_BoolMemberReadonly, bool >() = value; };
	inline const void* Get_CustomPropertyAgent_BoolMemberReadonly(Agent* self) { return &((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_BoolMemberReadonly, bool >(); };

	inline void Set_CustomPropertyAgent_FloatPropertyReadonly(Agent* self, float value) { ((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_FloatPropertyReadonly, float >() = value; };
	inline const void* Get_CustomPropertyAgent_FloatPropertyReadonly(Agent* self) { return &((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_FloatPropertyReadonly, float >(); };

	inline void Set_CustomPropertyAgent_IntMemberConst(int value) { ((CustomPropertyAgent*)0)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_IntMemberConst, int >() = value; }
	inline const void* Get_CustomPropertyAgent_IntMemberConst() { return &((CustomPropertyAgent*)0)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_IntMemberConst, int >(); }

	inline void Set_CustomPropertyAgent_IntProperty(Agent* self, int value) { ((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_IntProperty, int >() = value; };
	inline const void* Get_CustomPropertyAgent_IntProperty(Agent* self) { return &((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_IntProperty, int >(); };

	inline void Set_CustomPropertyAgent_Location(Agent* self, UnityEngine::Vector3 value) { ((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_Location, UnityEngine::Vector3 >() = value; };
	inline const void* Get_CustomPropertyAgent_Location(Agent* self) { return &((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_Location, UnityEngine::Vector3 >(); };

	inline void Set_CustomPropertyAgent_StringMemberReadonly(Agent* self, behaviac::string value) { ((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_StringMemberReadonly, behaviac::string >() = value; };
	inline const void* Get_CustomPropertyAgent_StringMemberReadonly(Agent* self) { return &((CustomPropertyAgent*)self)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_StringMemberReadonly, behaviac::string >(); };

	inline void FunctionPointer_CustomPropertyAgent_FnWithOutParam(Agent* self, int& param0) { ((CustomPropertyAgent*)self)->_Execute_Method_<METHOD_TYPE_CustomPropertyAgent_FnWithOutParam, void, int& >(param0); }
	inline void FunctionPointer_CustomPropertyAgent_TestFn1(Agent* self, TestNamespace::Float2& param0) { ((CustomPropertyAgent*)self)->_Execute_Method_<METHOD_TYPE_CustomPropertyAgent_TestFn1, void, TestNamespace::Float2& >(param0); }
	inline void FunctionPointer_CustomPropertyAgent_TestFn2(Agent* self, TestNamespace::ClassAsValueType* param0) { ((CustomPropertyAgent*)self)->_Execute_Method_<METHOD_TYPE_CustomPropertyAgent_TestFn2, void, TestNamespace::ClassAsValueType* >(param0); }
	inline void FunctionPointer_CustomPropertyAgent_LogMessage(char* param0) { CustomPropertyAgent::LogMessage(param0); }
	inline void FunctionPointer_CustomPropertyAgent_VectorAdd(IList& param0, System::Object& param1) { CustomPropertyAgent::VectorAdd(param0, param1); }
	inline void FunctionPointer_CustomPropertyAgent_VectorClear(IList& param0) { CustomPropertyAgent::VectorClear(param0); }
	inline bool FunctionPointer_CustomPropertyAgent_VectorContains(IList& param0, System::Object& param1) { return CustomPropertyAgent::VectorContains(param0, param1); }
	inline int FunctionPointer_CustomPropertyAgent_VectorLength(IList& param0) { return CustomPropertyAgent::VectorLength(param0); }
	inline void FunctionPointer_CustomPropertyAgent_VectorRemove(IList& param0, System::Object& param1) { CustomPropertyAgent::VectorRemove(param0, param1); }

	inline void Set_EmployeeParTestAgent_STV_AGENT_0(behaviac::Agent* value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_AGENT_0, behaviac::Agent* >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_AGENT_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_AGENT_0, behaviac::Agent* >(); }

	inline void Set_EmployeeParTestAgent_STV_F_0(float value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_F_0, float >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_F_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_F_0, float >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_F_0(float value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0, behaviac::vector<float> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_F_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0, behaviac::vector<float> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_AGENT_0(behaviac::Agent* value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_AGENT_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_AGENT_0(behaviac::vector<behaviac::Agent*> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_AGENT_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_F_0(behaviac::vector<float> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0, behaviac::vector<float> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_F_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0, behaviac::vector<float> >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_STR_0(behaviac::string value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0, behaviac::vector<behaviac::string> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_STR_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0, behaviac::vector<behaviac::string> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_STR_0(behaviac::vector<behaviac::string> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0, behaviac::vector<behaviac::string> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_STR_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0, behaviac::vector<behaviac::string> >(); }

	inline void Set_EmployeeParTestAgent_STV_STR_0(behaviac::string value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_STR_0, behaviac::string >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_STR_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_STR_0, behaviac::string >(); }

	inline void Set_EmployeeParTestAgent_TV_AGENT_0(Agent* self, behaviac::Agent* value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_AGENT_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >(); };

	inline void Set_EmployeeParTestAgent_TV_CSZSTR_0(Agent* self, char* value) {  };
	inline const void* Get_EmployeeParTestAgent_TV_CSZSTR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_CSZSTR_0, char* >(); };

	inline void Set_EmployeeParTestAgent_TV_D_0(Agent* self, double value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0, double >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_D_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0, double >(); };

	inline void Set_EmployeeParTestAgent_TV_F_0(Agent* self, float value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0, float >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_F_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0, float >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_F_0(Agent* self, float value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_F_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_AGENT_0(Agent* self, behaviac::Agent* value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_AGENT_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_AGENT_0(Agent* self, behaviac::vector<behaviac::Agent*> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_AGENT_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_F_0(Agent* self, behaviac::vector<float> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_F_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_STR_0(Agent* self, behaviac::string value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<behaviac::string> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_STR_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<behaviac::string> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_STR_0(Agent* self, behaviac::vector<behaviac::string> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<behaviac::string> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_STR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<behaviac::string> >(); };

	inline void Set_EmployeeParTestAgent_TV_LL_0(Agent* self, long long value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0, long long >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LL_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0, long long >(); };

	inline void Set_EmployeeParTestAgent_TV_STR_0(Agent* self, behaviac::string value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, behaviac::string >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_STR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, behaviac::string >(); };

	inline void Set_EmployeeParTestAgent_TV_SZSTR_0(Agent* self, char* value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_SZSTR_0, char* >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_SZSTR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_SZSTR_0, char* >(); };

	inline void Set_EmployeeParTestAgent_TV_UINT_0(Agent* self, unsigned int value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0, unsigned int >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_UINT_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0, unsigned int >(); };

	inline void Set_EmployeeParTestAgent_TV_ULL_0(Agent* self, unsigned long long value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0, unsigned long long >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_ULL_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0, unsigned long long >(); };

	inline void Set_EmployeeParTestAgent_TV_ULONG_0(Agent* self, unsigned long value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0, unsigned long >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_ULONG_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0, unsigned long >(); };

	inline void Set_EmployeeParTestAgent_STV_INT_0(int value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_INT_0, int >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_INT_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_INT_0, int >(); }

	inline void Set_EmployeeParTestAgent_STV_KEMPLOYEE_0(TNS::ST::PER::WRK::kEmployee value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_KEMPLOYEE_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_INT_0(int value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_INT_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_INT_0(behaviac::vector<int> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_INT_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0(TNS::ST::PER::WRK::kEmployee value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0(behaviac::vector<TNS::ST::PER::WRK::kEmployee> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(); }

	inline void Set_EmployeeParTestAgent_TV_INT_0(Agent* self, int value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_INT_0, int >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_INT_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_INT_0, int >(); };

	inline void Set_EmployeeParTestAgent_TV_KEMPLOYEE_0(Agent* self, TNS::ST::PER::WRK::kEmployee value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_KEMPLOYEE_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_INT_0(Agent* self, int value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_INT_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_INT_0(Agent* self, behaviac::vector<int> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_INT_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self, TNS::ST::PER::WRK::kEmployee value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(); };

	inline void Set_EmployeeParTestAgent_TV_LONG_0(Agent* self, long value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LONG_0, long >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LONG_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LONG_0, long >(); };

	inline void Set_EmployeeParTestAgent_TV_SHORT_0(Agent* self, short value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_SHORT_0, short >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_SHORT_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_SHORT_0, short >(); };

	inline void Set_EmployeeParTestAgent_TV_USHORT_0(Agent* self, unsigned short value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_USHORT_0, unsigned short >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_USHORT_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_USHORT_0, unsigned short >(); };

	inline void Set_EmployeeParTestAgent_STV_BOOL_0(bool value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_BOOL_0, bool >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_BOOL_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_BOOL_0, bool >(); }

	inline void Set_EmployeeParTestAgent_STV_CHAR_0(char value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_CHAR_0, char >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_CHAR_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_CHAR_0, char >(); }

	inline void Set_EmployeeParTestAgent_STV_ECOLOR_0(TNS::NE::NAT::eColor value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_ECOLOR_0, TNS::NE::NAT::eColor >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_ECOLOR_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_ECOLOR_0, TNS::NE::NAT::eColor >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_ECOLOR_0(TNS::NE::NAT::eColor value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_ECOLOR_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_BOOL_0(bool value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_BOOL_0(int index)
	{
#if _MSC_VER
		return ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index]._Getptr();
#else
		static ThreadBool buffer;
		bool b = ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >()[index];
		buffer.set(b);
		return buffer.value();
#endif
	}

	inline void Set_EmployeeParTestAgent_STV_LIST_BOOL_0(behaviac::vector<bool> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_BOOL_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_BOOL_0, behaviac::vector<bool> >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_CHAR_0(char value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_CHAR_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_CHAR_0(behaviac::vector<char> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_CHAR_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_CHAR_0, behaviac::vector<char> >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_ECOLOR_0(behaviac::vector<TNS::NE::NAT::eColor> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_ECOLOR_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >(); }

	inline void Set_EmployeeParTestAgent_STV_LIST_SBYTE_0(signed char value, int index) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index] = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_SBYTE_0(int index) { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index]; }

	inline void Set_EmployeeParTestAgent_STV_LIST_SBYTE_0(behaviac::vector<signed char> value) { ((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >() = value; }
	inline const void* Get_EmployeeParTestAgent_STV_LIST_SBYTE_0() { return &((EmployeeParTestAgent*)0)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >(); }

	inline void Set_EmployeeParTestAgent_TV_BOOL_0(Agent* self, bool value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_BOOL_0, bool >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_BOOL_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_BOOL_0, bool >(); };

	inline void Set_EmployeeParTestAgent_TV_BYTE_0(Agent* self, unsigned char value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_BYTE_0, unsigned char >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_BYTE_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_BYTE_0, unsigned char >(); };

	inline void Set_EmployeeParTestAgent_TV_CHAR_0(Agent* self, char value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_CHAR_0, char >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_CHAR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_CHAR_0, char >(); };

	inline void Set_EmployeeParTestAgent_TV_ECOLOR_0(Agent* self, TNS::NE::NAT::eColor value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ECOLOR_0, TNS::NE::NAT::eColor >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_ECOLOR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ECOLOR_0, TNS::NE::NAT::eColor >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_ECOLOR_0(Agent* self, TNS::NE::NAT::eColor value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_ECOLOR_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_BOOL_0(Agent* self, bool value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_BOOL_0(Agent* self, int index)
	{
#if _MSC_VER
		return ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index]._Getptr();
#else
		static ThreadBool buffer;
		bool b = ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >()[index];
		buffer.set(b);
		return buffer.value();
#endif
	}

	inline void Set_EmployeeParTestAgent_TV_LIST_BOOL_0(Agent* self, behaviac::vector<bool> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_BOOL_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BOOL_0, behaviac::vector<bool> >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_CHAR_0(Agent* self, char value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_CHAR_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_BYTE_0(Agent* self, unsigned char value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_BYTE_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_BYTE_0(Agent* self, behaviac::vector<unsigned char> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_BYTE_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_CHAR_0(Agent* self, behaviac::vector<char> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_CHAR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_CHAR_0, behaviac::vector<char> >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_ECOLOR_0(Agent* self, behaviac::vector<TNS::NE::NAT::eColor> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_ECOLOR_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >(); };

	inline void Set_EmployeeParTestAgent_TV_LIST_SBYTE_0(Agent* self, signed char value, int index) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index] = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_SBYTE_0(Agent* self, int index) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index]; };

	inline void Set_EmployeeParTestAgent_TV_LIST_SBYTE_0(Agent* self, behaviac::vector<signed char> value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_LIST_SBYTE_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_SBYTE_0, behaviac::vector<signed char> >(); };

	inline void Set_EmployeeParTestAgent_TV_SBYTE_0(Agent* self, signed char value) { ((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_SBYTE_0, signed char >() = value; };
	inline const void* Get_EmployeeParTestAgent_TV_SBYTE_0(Agent* self) { return &((EmployeeParTestAgent*)self)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_SBYTE_0, signed char >(); };

	inline behaviac::vector<behaviac::Agent*> FunctionPointer_EmployeeParTestAgent_Func_AgentListIR(Agent* self, behaviac::vector<behaviac::Agent*> param0) { return (behaviac::vector<behaviac::Agent*>)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListIR, behaviac::vector<behaviac::Agent*>, behaviac::vector<behaviac::Agent*> >(param0); }
	inline char* FunctionPointer_EmployeeParTestAgent_Func_CSzStringIR(Agent* self, char* param0) { return (char*)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_CSzStringIR, const char*, char* >(param0); }
	inline double FunctionPointer_EmployeeParTestAgent_Func_DoubleIR(Agent* self, double param0) { return (double)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleIR, double, double >(param0); }
	inline long long FunctionPointer_EmployeeParTestAgent_Func_LongLongIR(Agent* self, long long& param0) { return (long long)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongIR, long long, long long >(param0); }
	inline behaviac::vector<ParTestAgentBase*> FunctionPointer_EmployeeParTestAgent_Func_ParTestAgentBaseListIR(Agent* self, behaviac::vector<ParTestAgentBase*> param0) { return (behaviac::vector<ParTestAgentBase*>)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ParTestAgentBaseListIR, behaviac::vector<ParTestAgentBase*>, behaviac::vector<ParTestAgentBase*> >(param0); }
	inline float FunctionPointer_EmployeeParTestAgent_Func_SingleIR(Agent* self, float param0) { return (float)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleIR, float, float >(param0); }
	inline behaviac::vector<float> FunctionPointer_EmployeeParTestAgent_Func_SingleListIR(Agent* self, behaviac::vector<float> param0) { return (behaviac::vector<float>)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListIR, behaviac::vector<float>, behaviac::vector<float> >(param0); }
	inline behaviac::string FunctionPointer_EmployeeParTestAgent_Func_StringIR(Agent* self, behaviac::string& param0) { return (behaviac::string)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringIR, behaviac::string, behaviac::string& >(param0); }
	inline behaviac::vector<behaviac::string> FunctionPointer_EmployeeParTestAgent_Func_StringListIR(Agent* self, behaviac::vector<behaviac::string> param0) { return (behaviac::vector<behaviac::string>)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListIR, behaviac::vector<behaviac::string>, behaviac::vector<behaviac::string> >(param0); }
	inline char* FunctionPointer_EmployeeParTestAgent_Func_SzStringIR(Agent* self, char* param0) { return (char*)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SzStringIR, char*, char* >(param0); }
	inline unsigned int FunctionPointer_EmployeeParTestAgent_Func_UIntIR(Agent* self, unsigned int param0) { return (unsigned int)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntIR, unsigned int, unsigned int >(param0); }
	inline unsigned long FunctionPointer_EmployeeParTestAgent_Func_ULongIR(Agent* self, unsigned long param0) { return (unsigned long)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongIR, unsigned long, unsigned long >(param0); }
	inline unsigned long long FunctionPointer_EmployeeParTestAgent_Func_ULongLongIR(Agent* self, unsigned long long& param0) { return (unsigned long long)((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongIR, unsigned long long, unsigned long long >(param0); }
	inline behaviac::vector<behaviac::Agent*> FunctionPointer_EmployeeParTestAgent_Func_AgentListSMF(behaviac::vector<behaviac::Agent*> param0) { return EmployeeParTestAgent::Func_AgentListSMF(param0); }
	inline behaviac::vector<behaviac::string> FunctionPointer_EmployeeParTestAgent_Func_StringListSMF(behaviac::vector<behaviac::string> param0) { return EmployeeParTestAgent::Func_StringListSMF(param0); }
	inline behaviac::string FunctionPointer_EmployeeParTestAgent_Func_StringSMF(behaviac::string& param0) { return EmployeeParTestAgent::Func_StringSMF(param0); }
	inline unsigned long FunctionPointer_EmployeeParTestAgent_Func_ULongSMF(unsigned long param0) { return EmployeeParTestAgent::Func_ULongSMF(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_AgentListRef(Agent* self, behaviac::vector<behaviac::Agent*>& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListRef, void, behaviac::vector<behaviac::Agent*>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_CSzStringRef(Agent* self, char* param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_CSzStringRef, void, char* >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_DoubleRef(Agent* self, double& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleRef, void, double& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_LongLongRef(Agent* self, long long& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongRef, void, long long& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_SingleListRef(Agent* self, behaviac::vector<float>& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListRef, void, behaviac::vector<float>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_SingleRef(Agent* self, float& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleRef, void, float& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_StringListRef(Agent* self, behaviac::vector<behaviac::string>& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListRef, void, behaviac::vector<behaviac::string>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_StringRef(Agent* self, behaviac::string& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringRef, void, behaviac::string& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_SzStringRef(Agent* self, char*& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SzStringRef, void, char*& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_UIntRef(Agent* self, unsigned int& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntRef, void, unsigned int& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_ULongLongRef(Agent* self, unsigned long long& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongRef, void, unsigned long long& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_ULongRef(Agent* self, unsigned long& param0) { ((EmployeeParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongRef, void, unsigned long& >(param0); }
	inline int FunctionPointer_EmployeeParTestAgent_Func_IntIR(Agent* self, int param0) { return (int)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntIR, int, int >(param0); }
	inline behaviac::vector<int> FunctionPointer_EmployeeParTestAgent_Func_IntListIR(Agent* self, behaviac::vector<int> param0) { return (behaviac::vector<int>)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListIR, behaviac::vector<int>, behaviac::vector<int> >(param0); }
	inline TNS::ST::PER::WRK::kEmployee FunctionPointer_EmployeeParTestAgent_Func_kEmployeeIR(Agent* self, TNS::ST::PER::WRK::kEmployee& param0) { return (TNS::ST::PER::WRK::kEmployee)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(param0); }
	inline behaviac::vector<TNS::ST::PER::WRK::kEmployee> FunctionPointer_EmployeeParTestAgent_Func_kEmployeeListIR(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee> param0) { return (behaviac::vector<TNS::ST::PER::WRK::kEmployee>)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(param0); }
	inline long FunctionPointer_EmployeeParTestAgent_Func_LongIR(Agent* self, long param0) { return (long)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongIR, long, long >(param0); }
	inline short FunctionPointer_EmployeeParTestAgent_Func_ShortIR(Agent* self, short param0) { return (short)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortIR, short, short >(param0); }
	inline unsigned short FunctionPointer_EmployeeParTestAgent_Func_UShortIR(Agent* self, unsigned short param0) { return (unsigned short)((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortIR, unsigned short, unsigned short >(param0); }
	inline TNS::ST::PER::WRK::kEmployee FunctionPointer_EmployeeParTestAgent_Func_kEmployeeSMF(TNS::ST::PER::WRK::kEmployee& param0) { return EmployeeParTestAgent::Func_kEmployeeSMF(param0); }
	inline behaviac::vector<TNS::ST::PER::WRK::kEmployee> FunctionPointer_EmployeeParTestAgent_Func_kEmployeeListSMF(behaviac::vector<TNS::ST::PER::WRK::kEmployee> param0) { return EmployeeParTestAgent::Func_kEmployeeListSMF(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_IntRef(Agent* self, int& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntRef, void, int& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_IntListRef(Agent* self, behaviac::vector<int>& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListRef, void, behaviac::vector<int>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_kEmployeeRef(Agent* self, TNS::ST::PER::WRK::kEmployee& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeRef, void, TNS::ST::PER::WRK::kEmployee& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_kEmployeeListRef(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee>& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListRef, void, behaviac::vector<TNS::ST::PER::WRK::kEmployee>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_LongRef(Agent* self, long& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongRef, void, long& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_ShortRef(Agent* self, short& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortRef, void, short& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_UShortRef(Agent* self, unsigned short& param0) { ((ParTestAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortRef, void, unsigned short& >(param0); }
	inline bool FunctionPointer_EmployeeParTestAgent_Func_BooleanIR(Agent* self, bool param0) { return (bool)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(param0); }
	inline behaviac::vector<bool> FunctionPointer_EmployeeParTestAgent_Func_BooleanListIR(Agent* self, behaviac::vector<bool> param0) { return (behaviac::vector<bool>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(param0); }
	inline unsigned char FunctionPointer_EmployeeParTestAgent_Func_ByteIR(Agent* self, unsigned char param0) { return (unsigned char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR, unsigned char, unsigned char >(param0); }
	inline behaviac::vector<unsigned char> FunctionPointer_EmployeeParTestAgent_Func_ByteListIR(Agent* self, behaviac::vector<unsigned char> param0) { return (behaviac::vector<unsigned char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListIR, behaviac::vector<unsigned char>, behaviac::vector<unsigned char> >(param0); }
	inline char FunctionPointer_EmployeeParTestAgent_Func_CharIR(Agent* self, char param0) { return (char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR, char, char >(param0); }
	inline behaviac::vector<char> FunctionPointer_EmployeeParTestAgent_Func_CharListIR(Agent* self, behaviac::vector<char> param0) { return (behaviac::vector<char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR, behaviac::vector<char>, behaviac::vector<char> >(param0); }
	inline TNS::NE::NAT::eColor FunctionPointer_EmployeeParTestAgent_Func_eColorIR(Agent* self, TNS::NE::NAT::eColor param0) { return (TNS::NE::NAT::eColor)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR, TNS::NE::NAT::eColor, TNS::NE::NAT::eColor >(param0); }
	inline behaviac::vector<TNS::NE::NAT::eColor> FunctionPointer_EmployeeParTestAgent_Func_eColorListIR(Agent* self, behaviac::vector<TNS::NE::NAT::eColor> param0) { return (behaviac::vector<TNS::NE::NAT::eColor>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR, behaviac::vector<TNS::NE::NAT::eColor>, behaviac::vector<TNS::NE::NAT::eColor> >(param0); }
	inline signed char FunctionPointer_EmployeeParTestAgent_Func_SByteIR(Agent* self, signed char param0) { return (signed char)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteIR, signed char, signed char >(param0); }
	inline behaviac::vector<signed char> FunctionPointer_EmployeeParTestAgent_Func_SByteListIR(Agent* self, behaviac::vector<signed char> param0) { return (behaviac::vector<signed char>)((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(param0); }
	inline unsigned char FunctionPointer_EmployeeParTestAgent_Func_ByteSMF(unsigned char param0) { return EmployeeParTestAgent::Func_ByteSMF(param0); }
	inline char FunctionPointer_EmployeeParTestAgent_Func_CharSMF(char param0) { return EmployeeParTestAgent::Func_CharSMF(param0); }
	inline behaviac::vector<char> FunctionPointer_EmployeeParTestAgent_Func_CharListSMF(behaviac::vector<char> param0) { return EmployeeParTestAgent::Func_CharListSMF(param0); }
	inline signed char FunctionPointer_EmployeeParTestAgent_Func_SByteSMF(signed char param0) { return EmployeeParTestAgent::Func_SByteSMF(param0); }
	inline behaviac::vector<signed char> FunctionPointer_EmployeeParTestAgent_Func_SByteListSMF(behaviac::vector<signed char> param0) { return EmployeeParTestAgent::Func_SByteListSMF(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_BooleanRef(Agent* self, bool& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanRef, void, bool& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_BooleanListRef(Agent* self, behaviac::vector<bool>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef, void, behaviac::vector<bool>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_ByteRef(Agent* self, unsigned char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteRef, void, unsigned char& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_ByteListRef(Agent* self, behaviac::vector<unsigned char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListRef, void, behaviac::vector<unsigned char>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_CharRef(Agent* self, char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharRef, void, char& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_CharListRef(Agent* self, behaviac::vector<char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListRef, void, behaviac::vector<char>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_eColorRef(Agent* self, TNS::NE::NAT::eColor& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorRef, void, TNS::NE::NAT::eColor& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_eColorListRef(Agent* self, behaviac::vector<TNS::NE::NAT::eColor>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListRef, void, behaviac::vector<TNS::NE::NAT::eColor>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_SByteRef(Agent* self, signed char& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteRef, void, signed char& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_Func_SByteListRef(Agent* self, behaviac::vector<signed char>& param0) { ((ParTestAgentBase*)self)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListRef, void, behaviac::vector<signed char>& >(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_LogMessage(char* param0) { EmployeeParTestAgent::LogMessage(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_VectorAdd(IList& param0, System::Object& param1) { EmployeeParTestAgent::VectorAdd(param0, param1); }
	inline void FunctionPointer_EmployeeParTestAgent_VectorClear(IList& param0) { EmployeeParTestAgent::VectorClear(param0); }
	inline bool FunctionPointer_EmployeeParTestAgent_VectorContains(IList& param0, System::Object& param1) { return EmployeeParTestAgent::VectorContains(param0, param1); }
	inline int FunctionPointer_EmployeeParTestAgent_VectorLength(IList& param0) { return EmployeeParTestAgent::VectorLength(param0); }
	inline void FunctionPointer_EmployeeParTestAgent_VectorRemove(IList& param0, System::Object& param1) { EmployeeParTestAgent::VectorRemove(param0, param1); }

	inline void Set_FSMAgentTest_Message(Agent* self, FSMAgentTest::EMessage value) { ((FSMAgentTest*)self)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >() = value; };
	inline const void* Get_FSMAgentTest_Message(Agent* self) { return &((FSMAgentTest*)self)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >(); };

	inline void FunctionPointer_FSMAgentTest_active_update(Agent* self) { ((FSMAgentTest*)self)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_active_update, void >(); }
	inline void FunctionPointer_FSMAgentTest_exit_update(Agent* self) { ((FSMAgentTest*)self)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_exit_update, void >(); }
	inline void FunctionPointer_FSMAgentTest_inactive_update(Agent* self) { ((FSMAgentTest*)self)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_inactive_update, void >(); }
	inline void FunctionPointer_FSMAgentTest_pause_update(Agent* self) { ((FSMAgentTest*)self)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_pause_update, void >(); }
	inline void FunctionPointer_FSMAgentTest_LogMessage(char* param0) { FSMAgentTest::LogMessage(param0); }
	inline void FunctionPointer_FSMAgentTest_VectorAdd(IList& param0, System::Object& param1) { FSMAgentTest::VectorAdd(param0, param1); }
	inline void FunctionPointer_FSMAgentTest_VectorClear(IList& param0) { FSMAgentTest::VectorClear(param0); }
	inline bool FunctionPointer_FSMAgentTest_VectorContains(IList& param0, System::Object& param1) { return FSMAgentTest::VectorContains(param0, param1); }
	inline int FunctionPointer_FSMAgentTest_VectorLength(IList& param0) { return FSMAgentTest::VectorLength(param0); }
	inline void FunctionPointer_FSMAgentTest_VectorRemove(IList& param0, System::Object& param1) { FSMAgentTest::VectorRemove(param0, param1); }

	inline void FunctionPointer_HTNAgentHouse_BuildFoundation(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildFoundation, void >(); }
	inline void FunctionPointer_HTNAgentHouse_BuildFrame(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildFrame, void >(); }
	inline void FunctionPointer_HTNAgentHouse_BuildInterior(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildInterior, void >(); }
	inline void FunctionPointer_HTNAgentHouse_BuildRoof(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildRoof, void >(); }
	inline void FunctionPointer_HTNAgentHouse_BuildWalls(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildWalls, void >(); }
	inline void FunctionPointer_HTNAgentHouse_BuyLand(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuyLand, void >(); }
	inline void FunctionPointer_HTNAgentHouse_CutLogs(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_CutLogs, void >(); }
	inline void FunctionPointer_HTNAgentHouse_GetFriend(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_GetFriend, void >(); }
	inline void FunctionPointer_HTNAgentHouse_GetLoan(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_GetLoan, void >(); }
	inline void FunctionPointer_HTNAgentHouse_HireBuilder(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_HireBuilder, void >(); }
	inline void FunctionPointer_HTNAgentHouse_PayBuilder(Agent* self) { ((HTNAgentHouse*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_PayBuilder, void >(); }
	inline void FunctionPointer_HTNAgentHouse_ObtainPermit(Agent* self) { ((HTNAgentHouseBase*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentHouseBase_ObtainPermit, void >(); }
	inline void FunctionPointer_HTNAgentHouse_LogMessage(char* param0) { HTNAgentHouse::LogMessage(param0); }
	inline void FunctionPointer_HTNAgentHouse_VectorAdd(IList& param0, System::Object& param1) { HTNAgentHouse::VectorAdd(param0, param1); }
	inline void FunctionPointer_HTNAgentHouse_VectorClear(IList& param0) { HTNAgentHouse::VectorClear(param0); }
	inline bool FunctionPointer_HTNAgentHouse_VectorContains(IList& param0, System::Object& param1) { return HTNAgentHouse::VectorContains(param0, param1); }
	inline int FunctionPointer_HTNAgentHouse_VectorLength(IList& param0) { return HTNAgentHouse::VectorLength(param0); }
	inline void FunctionPointer_HTNAgentHouse_VectorRemove(IList& param0, System::Object& param1) { HTNAgentHouse::VectorRemove(param0, param1); }
	inline void FunctionPointer_HTNAgentHouse_root(Agent* self) { } /* root */
	inline void FunctionPointer_HTNAgentHouse_build_house(Agent* self) { } /* build_house */
	inline void FunctionPointer_HTNAgentHouse_construct(Agent* self) { } /* construct */

	inline bool FunctionPointer_HTNAgentTravel_exist_airport(Agent* self, int param0, int& param1) { return (bool)((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_airport, bool, int, int& >(param0, param1); }
	inline bool FunctionPointer_HTNAgentTravel_exist_airports(Agent* self, int param0, behaviac::vector<int>& param1) { return (bool)((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_airports, bool, int, behaviac::vector<int>& >(param0, param1); }
	inline bool FunctionPointer_HTNAgentTravel_exist_finish(Agent* self, int& param0) { return (bool)((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_finish, bool, int& >(param0); }
	inline bool FunctionPointer_HTNAgentTravel_exist_start(Agent* self, int& param0) { return (bool)((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_start, bool, int& >(param0); }
	inline void FunctionPointer_HTNAgentTravel_fly(Agent* self, int param0, int param1) { ((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_fly, void, int, int >(param0, param1); }
	inline bool FunctionPointer_HTNAgentTravel_long_distance(Agent* self, int param0, int param1) { return (bool)((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_long_distance, bool, int, int >(param0, param1); }
	inline void FunctionPointer_HTNAgentTravel_ride_taxi(Agent* self, int param0, int param1) { ((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_ride_taxi, void, int, int >(param0, param1); }
	inline bool FunctionPointer_HTNAgentTravel_short_distance(Agent* self, int param0, int param1) { return (bool)((HTNAgentTravel*)self)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_short_distance, bool, int, int >(param0, param1); }
	inline void FunctionPointer_HTNAgentTravel_LogMessage(char* param0) { HTNAgentTravel::LogMessage(param0); }
	inline void FunctionPointer_HTNAgentTravel_VectorAdd(IList& param0, System::Object& param1) { HTNAgentTravel::VectorAdd(param0, param1); }
	inline void FunctionPointer_HTNAgentTravel_VectorClear(IList& param0) { HTNAgentTravel::VectorClear(param0); }
	inline bool FunctionPointer_HTNAgentTravel_VectorContains(IList& param0, System::Object& param1) { return HTNAgentTravel::VectorContains(param0, param1); }
	inline int FunctionPointer_HTNAgentTravel_VectorLength(IList& param0) { return HTNAgentTravel::VectorLength(param0); }
	inline void FunctionPointer_HTNAgentTravel_VectorRemove(IList& param0, System::Object& param1) { HTNAgentTravel::VectorRemove(param0, param1); }
	inline void FunctionPointer_HTNAgentTravel_root(Agent* self) { } /* root */
	inline void FunctionPointer_HTNAgentTravel_travel(Agent* self, int x, int y) { } /* travel */
	inline void FunctionPointer_HTNAgentTravel_travel_by_air(Agent* self, int x, int y) { } /* travel_by_air */

	inline void Set_ParTestRegNameAgent_STV_KEMPLOYEE_0(TNS::ST::PER::WRK::kEmployee value) { ((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = value; }
	inline const void* Get_ParTestRegNameAgent_STV_KEMPLOYEE_0() { return &((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >(); }

	inline void Set_ParTestRegNameAgent_STV_LIST_SBYTE_0(signed char value, int index) { ((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index] = value; }
	inline const void* Get_ParTestRegNameAgent_STV_LIST_SBYTE_0(int index) { return &((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >()[index]; }

	inline void Set_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0(TNS::ST::PER::WRK::kEmployee value, int index) { ((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index] = value; }
	inline const void* Get_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0(int index) { return &((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index]; }

	inline void Set_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0(behaviac::vector<TNS::ST::PER::WRK::kEmployee> value) { ((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = value; }
	inline const void* Get_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0() { return &((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(); }

	inline void Set_ParTestRegNameAgent_STV_LIST_SBYTE_0(behaviac::vector<signed char> value) { ((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >() = value; }
	inline const void* Get_ParTestRegNameAgent_STV_LIST_SBYTE_0() { return &((ParTestRegNameAgent*)0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >(); }

	inline void Set_ParTestRegNameAgent_TV_AGENT_0(Agent* self, behaviac::Agent* value) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_AGENT_0, behaviac::Agent* >() = value; };
	inline const void* Get_ParTestRegNameAgent_TV_AGENT_0(Agent* self) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_AGENT_0, behaviac::Agent* >(); };

	inline void Set_ParTestRegNameAgent_TV_BYTE_0(Agent* self, unsigned char value) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_BYTE_0, unsigned char >() = value; };
	inline const void* Get_ParTestRegNameAgent_TV_BYTE_0(Agent* self) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_BYTE_0, unsigned char >(); };

	inline void Set_ParTestRegNameAgent_TV_CHAR_0(Agent* self, char value) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_CHAR_0, char >() = value; };
	inline const void* Get_ParTestRegNameAgent_TV_CHAR_0(Agent* self) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_CHAR_0, char >(); };

	inline void Set_ParTestRegNameAgent_TV_KEMPLOYEE_0(Agent* self, TNS::ST::PER::WRK::kEmployee value) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = value; };
	inline const void* Get_ParTestRegNameAgent_TV_KEMPLOYEE_0(Agent* self) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >(); };

	inline void Set_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0(Agent* self, TNS::ST::PER::WRK::kEmployee value, int index) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index] = value; };
	inline const void* Get_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0(Agent* self, int index) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >()[index]; };

	inline void Set_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee> value) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = value; };
	inline const void* Get_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0(Agent* self) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(); };

	inline void Set_ParTestRegNameAgent_TV_SBYTE_0(Agent* self, signed char value) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_SBYTE_0, signed char >() = value; };
	inline const void* Get_ParTestRegNameAgent_TV_SBYTE_0(Agent* self) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_SBYTE_0, signed char >(); };

	inline void Set_ParTestRegNameAgent_TV_STR_0(Agent* self, behaviac::string value) { ((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_STR_0, behaviac::string >() = value; };
	inline const void* Get_ParTestRegNameAgent_TV_STR_0(Agent* self) { return &((ParTestRegNameAgent*)self)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_STR_0, behaviac::string >(); };

	inline unsigned char FunctionPointer_ParTestRegNameAgent_Func_ByteIR(Agent* self, unsigned char param0) { return (unsigned char)((ParTestRegNameAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_ByteIR, unsigned char, unsigned char >(param0); }
	inline char FunctionPointer_ParTestRegNameAgent_Func_CharIR(Agent* self, char param0) { return (char)((ParTestRegNameAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_CharIR, char, char >(param0); }
	inline TNS::ST::PER::WRK::kEmployee FunctionPointer_ParTestRegNameAgent_Func_kEmployeeIR(Agent* self, TNS::ST::PER::WRK::kEmployee& param0) { return (TNS::ST::PER::WRK::kEmployee)((ParTestRegNameAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(param0); }
	inline behaviac::vector<TNS::ST::PER::WRK::kEmployee> FunctionPointer_ParTestRegNameAgent_Func_kEmployeeListIR(Agent* self, behaviac::vector<TNS::ST::PER::WRK::kEmployee> param0) { return (behaviac::vector<TNS::ST::PER::WRK::kEmployee>)((ParTestRegNameAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(param0); }
	inline signed char FunctionPointer_ParTestRegNameAgent_Func_SByteIR(Agent* self, signed char param0) { return (signed char)((ParTestRegNameAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_SByteIR, signed char, signed char >(param0); }
	inline behaviac::vector<signed char> FunctionPointer_ParTestRegNameAgent_Func_SByteListIR(Agent* self, behaviac::vector<signed char> param0) { return (behaviac::vector<signed char>)((ParTestRegNameAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(param0); }
	inline behaviac::string FunctionPointer_ParTestRegNameAgent_Func_StringIR(Agent* self, behaviac::string param0) { return (behaviac::string)((ParTestRegNameAgent*)self)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_StringIR, behaviac::string, behaviac::string >(param0); }
	inline void FunctionPointer_ParTestRegNameAgent_LogMessage(char* param0) { ParTestRegNameAgent::LogMessage(param0); }
	inline void FunctionPointer_ParTestRegNameAgent_VectorAdd(IList& param0, System::Object& param1) { ParTestRegNameAgent::VectorAdd(param0, param1); }
	inline void FunctionPointer_ParTestRegNameAgent_VectorClear(IList& param0) { ParTestRegNameAgent::VectorClear(param0); }
	inline bool FunctionPointer_ParTestRegNameAgent_VectorContains(IList& param0, System::Object& param1) { return ParTestRegNameAgent::VectorContains(param0, param1); }
	inline int FunctionPointer_ParTestRegNameAgent_VectorLength(IList& param0) { return ParTestRegNameAgent::VectorLength(param0); }
	inline void FunctionPointer_ParTestRegNameAgent_VectorRemove(IList& param0, System::Object& param1) { ParTestRegNameAgent::VectorRemove(param0, param1); }

	inline void Set_PreconEffectorAgent_count_both(Agent* self, int value) { ((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >() = value; };
	inline const void* Get_PreconEffectorAgent_count_both(Agent* self) { return &((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >(); };

	inline void Set_PreconEffectorAgent_count_failure(Agent* self, int value) { ((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_failure, int >() = value; };
	inline const void* Get_PreconEffectorAgent_count_failure(Agent* self) { return &((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_failure, int >(); };

	inline void Set_PreconEffectorAgent_count_success(Agent* self, int value) { ((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_success, int >() = value; };
	inline const void* Get_PreconEffectorAgent_count_success(Agent* self) { return &((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_success, int >(); };

	inline void Set_PreconEffectorAgent_ret(Agent* self, int value) { ((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_ret, int >() = value; };
	inline const void* Get_PreconEffectorAgent_ret(Agent* self) { return &((PreconEffectorAgent*)self)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_ret, int >(); };

	inline void FunctionPointer_PreconEffectorAgent_action(Agent* self) { ((PreconEffectorAgent*)self)->_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_action, void >(); }
	inline int FunctionPointer_PreconEffectorAgent_fn_return(Agent* self) { return (int)((PreconEffectorAgent*)self)->_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_fn_return, int >(); }
	inline void FunctionPointer_PreconEffectorAgent_LogMessage(char* param0) { PreconEffectorAgent::LogMessage(param0); }
	inline void FunctionPointer_PreconEffectorAgent_VectorAdd(IList& param0, System::Object& param1) { PreconEffectorAgent::VectorAdd(param0, param1); }
	inline void FunctionPointer_PreconEffectorAgent_VectorClear(IList& param0) { PreconEffectorAgent::VectorClear(param0); }
	inline bool FunctionPointer_PreconEffectorAgent_VectorContains(IList& param0, System::Object& param1) { return PreconEffectorAgent::VectorContains(param0, param1); }
	inline int FunctionPointer_PreconEffectorAgent_VectorLength(IList& param0) { return PreconEffectorAgent::VectorLength(param0); }
	inline void FunctionPointer_PreconEffectorAgent_VectorRemove(IList& param0, System::Object& param1) { PreconEffectorAgent::VectorRemove(param0, param1); }

	inline void Set_PropertyReadonlyAgent_MemberReadonly(Agent* self, int value) {  };
	inline const void* Get_PropertyReadonlyAgent_MemberReadonly(Agent* self) { return &((PropertyReadonlyAgent*)self)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonly, int >(); };

	inline void Set_PropertyReadonlyAgent_MemberReadonlyAs(Agent* self, int value) {  };
	inline const void* Get_PropertyReadonlyAgent_MemberReadonlyAs(Agent* self) { return &((PropertyReadonlyAgent*)self)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonlyAs, int >(); };

	inline void Set_PropertyReadonlyAgent_PropertyGetterOnly(Agent* self, int value) { ((PropertyReadonlyAgent*)self)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterOnly, int >() = value; };
	inline const void* Get_PropertyReadonlyAgent_PropertyGetterOnly(Agent* self) { return &((PropertyReadonlyAgent*)self)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterOnly, int >(); };

	inline void Set_PropertyReadonlyAgent_PropertyGetterSetter(Agent* self, int value) { ((PropertyReadonlyAgent*)self)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterSetter, int >() = value; };
	inline const void* Get_PropertyReadonlyAgent_PropertyGetterSetter(Agent* self) { return &((PropertyReadonlyAgent*)self)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterSetter, int >(); };

	inline void Set_PropertyReadonlyAgent_StaticPropertyGetterSetter(float value) { ((PropertyReadonlyAgent*)0)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_StaticPropertyGetterSetter, float >() = value; }
	inline const void* Get_PropertyReadonlyAgent_StaticPropertyGetterSetter() { return &((PropertyReadonlyAgent*)0)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_StaticPropertyGetterSetter, float >(); }

	inline void FunctionPointer_PropertyReadonlyAgent_FnWithOutParam(Agent* self, int& param0) { ((PropertyReadonlyAgent*)self)->_Execute_Method_<METHOD_TYPE_PropertyReadonlyAgent_FnWithOutParam, void, int& >(param0); }
	inline void FunctionPointer_PropertyReadonlyAgent_PassInProperty(Agent* self, int param0) { ((PropertyReadonlyAgent*)self)->_Execute_Method_<METHOD_TYPE_PropertyReadonlyAgent_PassInProperty, void, int >(param0); }
	inline void FunctionPointer_PropertyReadonlyAgent_LogMessage(char* param0) { PropertyReadonlyAgent::LogMessage(param0); }
	inline void FunctionPointer_PropertyReadonlyAgent_VectorAdd(IList& param0, System::Object& param1) { PropertyReadonlyAgent::VectorAdd(param0, param1); }
	inline void FunctionPointer_PropertyReadonlyAgent_VectorClear(IList& param0) { PropertyReadonlyAgent::VectorClear(param0); }
	inline bool FunctionPointer_PropertyReadonlyAgent_VectorContains(IList& param0, System::Object& param1) { return PropertyReadonlyAgent::VectorContains(param0, param1); }
	inline int FunctionPointer_PropertyReadonlyAgent_VectorLength(IList& param0) { return PropertyReadonlyAgent::VectorLength(param0); }
	inline void FunctionPointer_PropertyReadonlyAgent_VectorRemove(IList& param0, System::Object& param1) { PropertyReadonlyAgent::VectorRemove(param0, param1); }

	inline void Set_StaticAgent_sInt(int value) { ((StaticAgent*)0)->_Get_Property_<PROPERTY_TYPE_StaticAgent_sInt, int >() = value; }
	inline const void* Get_StaticAgent_sInt() { return &((StaticAgent*)0)->_Get_Property_<PROPERTY_TYPE_StaticAgent_sInt, int >(); }

	inline void FunctionPointer_StaticAgent_sAction() { StaticAgent::sAction(); }
	inline void FunctionPointer_StaticAgent_LogMessage(char* param0) { StaticAgent::LogMessage(param0); }
	inline void FunctionPointer_StaticAgent_VectorAdd(IList& param0, System::Object& param1) { StaticAgent::VectorAdd(param0, param1); }
	inline void FunctionPointer_StaticAgent_VectorClear(IList& param0) { StaticAgent::VectorClear(param0); }
	inline bool FunctionPointer_StaticAgent_VectorContains(IList& param0, System::Object& param1) { return StaticAgent::VectorContains(param0, param1); }
	inline int FunctionPointer_StaticAgent_VectorLength(IList& param0) { return StaticAgent::VectorLength(param0); }
	inline void FunctionPointer_StaticAgent_VectorRemove(IList& param0, System::Object& param1) { StaticAgent::VectorRemove(param0, param1); }

	inline void Set_TestNS_AgentArrayAccessTest_ListInts(Agent* self, int value, int index) { ((TestNS::AgentArrayAccessTest*)self)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts, behaviac::vector<int> >()[index] = value; };
	inline const void* Get_TestNS_AgentArrayAccessTest_ListInts(Agent* self, int index) { return &((TestNS::AgentArrayAccessTest*)self)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts, behaviac::vector<int> >()[index]; };

	inline void Set_TestNS_AgentArrayAccessTest_Int(Agent* self, int value) { ((TestNS::AgentArrayAccessTest*)self)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_Int, int >() = value; };
	inline const void* Get_TestNS_AgentArrayAccessTest_Int(Agent* self) { return &((TestNS::AgentArrayAccessTest*)self)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_Int, int >(); };

	inline void Set_TestNS_AgentArrayAccessTest_ListInts(Agent* self, behaviac::vector<int> value) { ((TestNS::AgentArrayAccessTest*)self)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts, behaviac::vector<int> >() = value; };
	inline const void* Get_TestNS_AgentArrayAccessTest_ListInts(Agent* self) { return &((TestNS::AgentArrayAccessTest*)self)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts, behaviac::vector<int> >(); };

	inline void FunctionPointer_TestNS_AgentArrayAccessTest_LogMessage(char* param0) { TestNS::AgentArrayAccessTest::LogMessage(param0); }
	inline void FunctionPointer_TestNS_AgentArrayAccessTest_VectorAdd(IList& param0, System::Object& param1) { TestNS::AgentArrayAccessTest::VectorAdd(param0, param1); }
	inline void FunctionPointer_TestNS_AgentArrayAccessTest_VectorClear(IList& param0) { TestNS::AgentArrayAccessTest::VectorClear(param0); }
	inline bool FunctionPointer_TestNS_AgentArrayAccessTest_VectorContains(IList& param0, System::Object& param1) { return TestNS::AgentArrayAccessTest::VectorContains(param0, param1); }
	inline int FunctionPointer_TestNS_AgentArrayAccessTest_VectorLength(IList& param0) { return TestNS::AgentArrayAccessTest::VectorLength(param0); }
	inline void FunctionPointer_TestNS_AgentArrayAccessTest_VectorRemove(IList& param0, System::Object& param1) { TestNS::AgentArrayAccessTest::VectorRemove(param0, param1); }
}
#endif // _BEHAVIAC_AGENT_PROPERTIES_H_
